/*
 * Copyright 2009, OpenIAM LLC 
 * This file is part of the OpenIAM Identity and Access Management Suite
 *
 *   OpenIAM Identity and Access Management Suite is free software: 
 *   you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License 
 *   version 3 as published by the Free Software Foundation.
 *
 *   OpenIAM is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with OpenIAM.  If not, see <http://www.gnu.org/licenses/>. *
 */

/**
 *
 */
package org.openiam.idm.srvc.pswd.ws;

import org.openiam.base.ws.BooleanResponse;
import org.openiam.base.ws.Response;
import org.openiam.exception.ObjectNotFoundException;
import org.openiam.idm.srvc.policy.dto.Policy;
import org.openiam.idm.srvc.policy.ws.PolicyResponse;
import org.openiam.idm.srvc.pswd.dto.Password;
import org.openiam.idm.srvc.pswd.dto.PasswordResetTokenRequest;
import org.openiam.idm.srvc.pswd.dto.PasswordResetTokenResponse;
import org.openiam.idm.srvc.pswd.dto.PasswordValidationResponse;
import org.openiam.idm.srvc.pswd.dto.ValidatePasswordResetTokenResponse;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebService;

/**
 * @author Suneet Shah
 */
@WebService(targetNamespace = "urn:idm.openiam.org/srvc/pswd/service", name = "PasswordWebService")
public interface PasswordWebService {

    /**
     * Determines if a password associated with a principal is valid based on
     * the policies for a security domain.
     *
     * @param pswd
     * @return
     */
    @WebMethod
    PasswordValidationResponse isPasswordValid(
            @WebParam(name = "pswd", targetNamespace = "") Password pswd)
            throws ObjectNotFoundException;

    /**
     * Generates a temporary token that can be used as part of Secure challenge
     * response
     *
     * @param request
     * @return
     */
    @WebMethod
    PasswordResetTokenResponse generatePasswordResetToken(
            @WebParam(name = "request", targetNamespace = "") PasswordResetTokenRequest request);

    /**
     * Validates that the temporary token generated by
     * <code>generatePasswordResetToken</code> is still valid
     *
     * @param token
     * @return
     */
    @WebMethod
    ValidatePasswordResetTokenResponse validatePasswordResetToken(
            @WebParam(name = "token", targetNamespace = "") String token);


    public Policy getPasswordPolicy(String principal, String msysId);
}
