<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:jaxws="http://cxf.apache.org/jaxws"
       xsi:schemaLocation="http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
       http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd">

    <import resource="jmsContext.xml" />

<<<<<<< HEAD
=======

	<context:annotation-config />
>>>>>>> Elasticsearch
	<context:component-scan
		base-package="org.openiam.base, org.openiam.util,
    								      org.openiam.core,
    								      org.openiam.bpm.activiti,
    								      org.openiam.idm,
    								      org.openiam.connector,
    								      org.openiam.idm.*,
    								      org.openiam.provision.*,
    								      org.openiam.dozer.converter,
    								      org.openiam.validator,
    								      org.openiam.internationalization,
    								      org.openiam.elasticsearch" />

	<!--
	<bean id="springContextProvider" class="org.openiam.util.SpringContextProvider" />
	-->

	<bean id="httpClientHelper" class="org.openiam.http.client.OpenIAMHttpClient" />

	<bean id="customJacksonMapper" class="org.openiam.idm.util.CustomJacksonMapper" />
	
	<bean id="jsonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
		<property name="prefixJson" value="false"/>
		<property name="supportedMediaTypes" value="application/json"/>
		<property name="objectMapper" ref="customJacksonMapper" />
	</bean>
	<bean id="restTemplate" class="org.springframework.web.client.RestTemplate">
		<property name="messageConverters">
			<list>
				<ref bean="jsonHttpMessageConverter"/>
			</list>
		</property>
	</bean>

	<bean id="deepDozerMapper" class="org.dozer.DozerBeanMapper">
		<property name="mappingFiles">
			<list>
				<value>org/openiam/dozer/dozer-common-mapping.xml</value>
				<value>org/openiam/dozer/dozer-deep-mapping.xml</value>
			</list>
		</property>
	</bean>

	<bean id="shallowDozerMapper" class="org.dozer.DozerBeanMapper">
		<property name="mappingFiles">
			<list>
				<value>org/openiam/dozer/dozer-common-mapping.xml</value>
				<value>org/openiam/dozer/dozer-shallow-mapping.xml</value>
			</list>
		</property>
	</bean>

	<bean id="dto2entityShallowDozerMapper" class="org.dozer.DozerBeanMapper">
		<property name="mappingFiles">
			<list>
				<value>org/openiam/dozer/dto2entity/entity2dto.common.mappings.xml
				</value>
				<value>org/openiam/dozer/dto2entity/entity2dto.shallow.mappings.xml
				</value>
			</list>
		</property>
	</bean>

	<bean id="dto2entityDeepDozerMapper" class="org.dozer.DozerBeanMapper">
		<property name="mappingFiles">
			<list>
				<value>org/openiam/dozer/dto2entity/entity2dto.common.mappings.xml
				</value>
				<value>org/openiam/dozer/dto2entity/entity2dto.deep.mappings.xml
				</value>
			</list>
		</property>
	</bean>

	<bean id="pojoProperties"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="locations">
			<list>
				<value>classpath:datasource.properties</value>
				<value>classpath:iam-plugin.properties</value>
				<value>classpath:securityconf.properties</value>
				<value>classpath:openiam.esb.properties</value>
				<value>classpath:notification.properties</value>
				<value>file:/data/openiam/conf/datasource.properties</value>
				<value>file:/data/openiam/conf/iam-plugin.properties</value>
				<value>file:/data/openiam/conf/securityconf.properties</value>
				<value>file:/data/openiam/conf/openiam.esb.properties</value>
				<value>file:/data/openiam/conf/notification.properties</value>
			</list>
		</property>
		<property name="ignoreResourceNotFound" value="true" />
	</bean>

	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="properties" ref="pojoProperties" />
	</bean>

	<bean id="targetConfigurableGroovyScriptEngine" class="${org.openiam.groovy.script.engine}" />

    <bean id="baseTransactionProxy" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean"
          abstract="true">
        <property name="transactionManager" ref="transactionManager"/>
        <property name="transactionAttributes">
            <props>
                <prop key="execute">PROPAGATION_REQUIRED</prop>
            </props>
        </property>
    </bean>

    <bean id="configurableGroovyScriptEngine" parent="baseTransactionProxy">
        <property name="target" ref="targetConfigurableGroovyScriptEngine"/>
    </bean>

	<bean id="luceneReindexService" class="org.openiam.idm.srvc.lucene.LuceneReindexService">
		<property name="hibernateSearchDAOs">
			<list>
				<ref bean="userSearchDAO" />
				<ref bean="loginSearchDAO" />
				<ref bean="emailSearchDAO" />
				<ref bean="phoneSearchDAO" />
			</list>
		</property>
	</bean>

	<!-- Thread Scheduling - not using annotations since the interval must be 
		configurable -->
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean"> 
		<property name="triggers"> 
			<list>
				<!--  
				<bean class="org.springframework.scheduling.quartz.SimpleTriggerBean"> 
					<property name="startDelay" value="${org.openiam.lucene.reindex.threadsweep}" /> 
					<property name="repeatInterval" value="${org.openiam.lucene.reindex.threadsweep}" /> 
					<property name="jobDetail"> 
						<bean class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"> 
							<property name="targetObject" ref="luceneReindexService" /> 
							<property name="targetMethod" value="sweep" /> 
							<property name="concurrent" value="false" /> 
						</bean> 
					</property> 
				</bean>
				-->
				<bean class="org.springframework.scheduling.quartz.SimpleTriggerBean">
					<property name="startDelay" value="${org.openiam.audit.threadsweep}" />
					<property name="repeatInterval" value="${org.openiam.audit.threadsweep}" />
					<property name="jobDetail">
						<bean class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
							<property name="targetObject" ref="auditLogDispatcher" />
							<property name="targetMethod" value="sweep" />
							<property name="concurrent" value="false" />
						</bean>
					</property>
				</bean>
                <bean class="org.springframework.scheduling.quartz.SimpleTriggerBean">
                    <property name="startDelay" value="${org.openiam.prov.threadsweep}" />
                    <property name="repeatInterval" value="${org.openiam.prov.threadsweep}" />
                    <property name="jobDetail">
                        <bean class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
                            <property name="targetObject" ref="provDispatcher" />
                            <property name="targetMethod" value="sweep" />
                            <property name="concurrent" value="false" />
                        </bean>
                    </property>
                </bean>

                <bean class="org.springframework.scheduling.quartz.SimpleTriggerBean">
                    <property name="startDelay" value="${org.openiam.org.manager.threadsweep}" />
                    <property name="repeatInterval" value="${org.openiam.org.manager.threadsweep}" />
                    <property name="jobDetail">
                        <bean class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
                            <property name="targetObject" ref="organizationService" />
                            <property name="targetMethod" value="sweep" />
                            <property name="concurrent" value="false" />
                        </bean>
                    </property>
                </bean>

                <bean class="org.springframework.scheduling.quartz.SimpleTriggerBean">
                    <property name="startDelay" value="${org.openiam.org.manager.threadsweep}" />
                    <property name="repeatInterval" value="${org.openiam.org.manager.threadsweep}" />
                    <property name="jobDetail">
                        <bean class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
                            <property name="targetObject" ref="organizationTypeServiceImpl" />
                            <property name="targetMethod" value="sweep" />
                            <property name="concurrent" value="false" />
                        </bean>
                    </property>
                </bean>

                <bean class="org.springframework.scheduling.quartz.SimpleTriggerBean">
                    <property name="startDelay" value="${org.openiam.metadata.threadsweep}" />
                    <property name="repeatInterval" value="${org.openiam.metadata.threadsweep}" />
                    <property name="jobDetail">
                        <bean class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
                            <property name="targetObject" ref="metadataDispatcher" />
                            <property name="targetMethod" value="sweep" />
                            <property name="concurrent" value="false" />
                        </bean>
                    </property>
                </bean>
			</list> 
		</property> 
	</bean>

	<bean id="emailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="${mail.host}" />
		<property name="port" value="${mail.port}" />
		<property name="username" value="${mail.username}" />
		<property name="password" value="${mail.password}" />
		<property name="javaMailProperties">
			<props>
				<prop key="mail.smtp.auth">false</prop>
				<prop key="mail.smtp.starttls.enable">false</prop>
			</props>
		</property>
	</bean>



	<!-- Batch related beans -->
	<!--
	<bean id="batchConfigDAO" class="org.openiam.idm.srvc.batch.service.BatchConfigDAOImpl">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	-->

	<!-- Hibernate SessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- <property name="jtaTransactionManager"> <bean factory-bean="transactionManager" 
			factory-method="getTransactionManager" /> </property> -->
		<property name="hibernateProperties" ref="hibernateProperties" />

		<property name="packagesToScan"
			value="org.openiam.core.domain*,
											   org.openiam.idm.srvc.grp.domain*,
											   org.openiam.idm.srvc.role.domain*,
                                               org.openiam.idm.srvc.user.domain*,
                                               org.openiam.am.srvc.domain*,
                                               org.openiam.idm.srvc.mngsys.domain*,
                                               org.openiam.idm.srvc.synch.domain*,
                                               org.openiam.idm.srvc.org.domain*,
											   org.openiam.idm.srvc.auth.domain*,
											   org.openiam.idm.srvc.cat.domain*,
                                               org.openiam.idm.srvc.continfo.domain*,
                                               org.openiam.idm.srvc.res.domain*,
                                               org.openiam.idm.srvc.recon.domain*,
                                               org.openiam.idm.srvc.meta.domain*,
                                               org.openiam.idm.srvc.policy.domain*,
                                               org.openiam.idm.srvc.audit.domain*,
                                               org.openiam.idm.srvc.pswd.domain*,
                                               org.openiam.idm.srvc.lang.domain*,
                                               org.openiam.idm.srvc.report.domain*,
                                               org.openiam.idm.srvc.prov*,
                                               org.openiam.idm.srvc.batch.domain*,
                                               org.openiam.idm.srvc.ui*" />
	</bean>
	<util:properties id="hibernateProperties"
		location="classpath:openiam.hibernate.properties">
		<prop key="hibernate.dialect">${openiam.hibernate.dialect}</prop>
		<prop key="hibernate.show_sql">${openiam.hibernate.show.sql}</prop>
		<prop key="hibernate.generate_statistics">${openiam.hibernate.generate.statistics}</prop>
		<prop key="hibernate.use_sql_comments">${openiam.hibernate.sql.comments.enabled}</prop>
		<prop key="hibernate.connection.autoReconnect">${openiam.hibernate.auto.connect.enabled}</prop>

        <prop key="hibernate.connection.CharSet">UTF-8</prop>
        <prop key="hibernate.connection.characterEncoding">UTF-8</prop>
        <prop key="hibernate.connection.useUnicode">true</prop>
		<!--<prop key="hibernate.validationQuery">${openiam.hibernate.validationQuery}</prop>-->
	</util:properties>

	<jee:jndi-lookup jndi-name="${datasource.jndi.name}"
		id="dataSource" />

	<bean id="exporter" class="org.springframework.jmx.export.MBeanExporter"
		lazy-init="false">
		<property name="autodetect" value="true" />
		<property name="namingStrategy" ref="namingStrategy" />
		<property name="assembler" ref="assembler" />
	</bean>
	<bean id="attributeSource"
		class="org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource" />
	<bean id="assembler"
		class="org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler">
		<property name="attributeSource" ref="attributeSource" />
	</bean>
	<bean id="namingStrategy"
		class="org.springframework.jmx.export.naming.MetadataNamingStrategy">
		<property name="attributeSource" ref="attributeSource" />
	</bean>

	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	
	<bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
		<property name="transactionManager" ref="transactionManager" />
	</bean>

	<!-- enable the configuration of transactional behavior based on annotations -->
	<tx:annotation-driven transaction-manager="transactionManager" />


	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<!-- the transactional semantics... -->
		<tx:attributes>
			<!-- all methods starting with 'get' are read-only -->
			<tx:method name="get*" read-only="true" propagation="SUPPORTS" />
			<tx:method name="start*" read-only="true" propagation="NOT_SUPPORTED" />
			<tx:method name="send*" read-only="true" propagation="NOT_SUPPORTED" />
			<!-- other methods use the default transaction settings (see below) -->
			<tx:method name="*" propagation="REQUIRED" rollback-for="RuntimeException" />

		</tx:attributes>
	</tx:advice>


	<aop:aspectj-autoproxy  />
	<!-- <aop:aspectj-autoproxy  proxy-target-class="true"/> -->
    <!-- <bean class="org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator" /> -->

    <bean id="auditCacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="configLocation">
            <value>classpath:audit.ehcache.xml</value>
        </property>
        <property name="shared" value="true"/>
    </bean>
    <bean id="auditLogBuilderCache" class="org.springframework.cache.ehcache.EhCacheFactoryBean">
        <property name="cacheManager">
            <ref bean="auditCacheManager"/>
        </property>
        <property name="cacheName">
            <value>AuditLogBuilderCache</value>
        </property>
    </bean>

</beans>
