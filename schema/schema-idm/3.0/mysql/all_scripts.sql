
/* new file */
use openiam;

ALTER TABLE ATTRIBUTE_MAP ADD COLUMN DEFAULT_VALUE varchar(32) NULL;

/* new file */
CREATE database activiti DEFAULT CHARACTER SET utf8 CHARACTER SET = utf8;
/* new file */
use activiti;

create table ACT_GE_PROPERTY (
    NAME_ varchar(64),
    VALUE_ varchar(300),
    REV_ integer,
    primary key (NAME_)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_bin;

insert into ACT_GE_PROPERTY
values ('historyLevel', '2', 1);

insert into ACT_GE_PROPERTY
values ('schema.version', '5.10', 1);

insert into ACT_GE_PROPERTY
values ('schema.history', 'create(5.10)', 1);

insert into ACT_GE_PROPERTY
values ('next.dbid', '1', 1);

create table ACT_GE_BYTEARRAY (
    ID_ varchar(64),
    REV_ integer,
    NAME_ varchar(255),
    DEPLOYMENT_ID_ varchar(64),
    BYTES_ LONGBLOB,
    GENERATED_ TINYINT,
    primary key (ID_)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_bin;

create table ACT_RE_DEPLOYMENT (
    ID_ varchar(64),
    NAME_ varchar(255),
    DEPLOY_TIME_ timestamp,
    primary key (ID_)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_bin;

create table ACT_RU_EXECUTION (
    ID_ varchar(64),
    REV_ integer,
    PROC_INST_ID_ varchar(64),
    BUSINESS_KEY_ varchar(255),
    PARENT_ID_ varchar(64),
    PROC_DEF_ID_ varchar(64),
    SUPER_EXEC_ varchar(64),
    ACT_ID_ varchar(255),
    IS_ACTIVE_ TINYINT,
    IS_CONCURRENT_ TINYINT,
    IS_SCOPE_ TINYINT,
    IS_EVENT_SCOPE_ TINYINT,
    SUSPENSION_STATE_ integer,
    CACHED_ENT_STATE_ integer,
    primary key (ID_),
    unique ACT_UNIQ_RU_BUS_KEY (PROC_DEF_ID_, BUSINESS_KEY_)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_bin;

create table ACT_RU_JOB (
    ID_ varchar(64) NOT NULL,
	  REV_ integer,
    TYPE_ varchar(255) NOT NULL,
    LOCK_EXP_TIME_ timestamp,
    LOCK_OWNER_ varchar(255),
    EXCLUSIVE_ boolean,
    EXECUTION_ID_ varchar(64),
    PROCESS_INSTANCE_ID_ varchar(64),
    RETRIES_ integer,
    EXCEPTION_STACK_ID_ varchar(64),
    EXCEPTION_MSG_ varchar(4000),
    DUEDATE_ timestamp NULL,
    REPEAT_ varchar(255),
    HANDLER_TYPE_ varchar(255),
    HANDLER_CFG_ varchar(4000),
    primary key (ID_)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_bin;

create table ACT_RE_PROCDEF (
    ID_ varchar(64),
    REV_ integer,
    CATEGORY_ varchar(255),
    NAME_ varchar(255),
    KEY_ varchar(255),
    VERSION_ integer,
    DEPLOYMENT_ID_ varchar(64),
    RESOURCE_NAME_ varchar(4000),
    DGRM_RESOURCE_NAME_ varchar(4000),
    HAS_START_FORM_KEY_ TINYINT,
    SUSPENSION_STATE_ integer,
    primary key (ID_)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_bin;

create table ACT_RU_TASK (
    ID_ varchar(64),
    REV_ integer,
    EXECUTION_ID_ varchar(64),
    PROC_INST_ID_ varchar(64),
    PROC_DEF_ID_ varchar(64),
    NAME_ varchar(255),
    PARENT_TASK_ID_ varchar(64),
    DESCRIPTION_ varchar(4000),
    TASK_DEF_KEY_ varchar(255),
    OWNER_ varchar(64),
    ASSIGNEE_ varchar(64),
    DELEGATION_ varchar(64),
    PRIORITY_ integer,
    CREATE_TIME_ timestamp,
    DUE_DATE_ datetime,
    primary key (ID_)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_bin;

create table ACT_RU_IDENTITYLINK (
    ID_ varchar(64),
    REV_ integer,
    GROUP_ID_ varchar(64),
    TYPE_ varchar(255),
    USER_ID_ varchar(64),
    TASK_ID_ varchar(64),
    PROC_DEF_ID_ varchar(64),    
    primary key (ID_)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_bin;

create table ACT_RU_VARIABLE (
    ID_ varchar(64) not null,
    REV_ integer,
    TYPE_ varchar(255) not null,
    NAME_ varchar(255) not null,
    EXECUTION_ID_ varchar(64),
	  PROC_INST_ID_ varchar(64),
    TASK_ID_ varchar(64),
    BYTEARRAY_ID_ varchar(64),
    DOUBLE_ double,
    LONG_ bigint,
    TEXT_ varchar(4000),
    TEXT2_ varchar(4000),
    primary key (ID_)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_bin;

create table ACT_RU_EVENT_SUBSCR (
    ID_ varchar(64) not null,
    REV_ integer,
    EVENT_TYPE_ varchar(255) not null,
    EVENT_NAME_ varchar(255),
    EXECUTION_ID_ varchar(64),
    PROC_INST_ID_ varchar(64),
    ACTIVITY_ID_ varchar(64),
    CONFIGURATION_ varchar(255),
    CREATED_ timestamp not null,
    primary key (ID_)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_bin;

create index ACT_IDX_EXEC_BUSKEY on ACT_RU_EXECUTION(BUSINESS_KEY_);
create index ACT_IDX_TASK_CREATE on ACT_RU_TASK(CREATE_TIME_);
create index ACT_IDX_IDENT_LNK_USER on ACT_RU_IDENTITYLINK(USER_ID_);
create index ACT_IDX_IDENT_LNK_GROUP on ACT_RU_IDENTITYLINK(GROUP_ID_);
create index ACT_IDX_EVENT_SUBSCR_CONFIG_ on ACT_RU_EVENT_SUBSCR(CONFIGURATION_);
create index ACT_IDX_VARIABLE_TASK_ID on ACT_RU_VARIABLE(TASK_ID_);
create index ACT_IDX_ATHRZ_PROCEDEF on ACT_RU_IDENTITYLINK(PROC_DEF_ID_);

alter table ACT_GE_BYTEARRAY
    add constraint ACT_FK_BYTEARR_DEPL 
    foreign key (DEPLOYMENT_ID_) 
    references ACT_RE_DEPLOYMENT (ID_);

alter table ACT_RE_PROCDEF
    add constraint ACT_UNIQ_PROCDEF
    unique (KEY_,VERSION_);
    
alter table ACT_RU_EXECUTION
    add constraint ACT_FK_EXE_PROCINST 
    foreign key (PROC_INST_ID_) 
    references ACT_RU_EXECUTION (ID_) on delete cascade on update cascade;

alter table ACT_RU_EXECUTION
    add constraint ACT_FK_EXE_PARENT 
    foreign key (PARENT_ID_) 
    references ACT_RU_EXECUTION (ID_);
    
alter table ACT_RU_EXECUTION
    add constraint ACT_FK_EXE_SUPER 
    foreign key (SUPER_EXEC_) 
    references ACT_RU_EXECUTION (ID_);
    
alter table ACT_RU_IDENTITYLINK
    add constraint ACT_FK_TSKASS_TASK 
    foreign key (TASK_ID_) 
    references ACT_RU_TASK (ID_);
    
alter table ACT_RU_IDENTITYLINK
    add constraint ACT_FK_ATHRZ_PROCEDEF 
    foreign key (PROC_DEF_ID_) 
    references ACT_RE_PROCDEF(ID_);
    
alter table ACT_RU_TASK
    add constraint ACT_FK_TASK_EXE
    foreign key (EXECUTION_ID_)
    references ACT_RU_EXECUTION (ID_);
    
alter table ACT_RU_TASK
    add constraint ACT_FK_TASK_PROCINST
    foreign key (PROC_INST_ID_)
    references ACT_RU_EXECUTION (ID_);
    
alter table ACT_RU_TASK
  add constraint ACT_FK_TASK_PROCDEF
  foreign key (PROC_DEF_ID_)
  references ACT_RE_PROCDEF (ID_);
  
alter table ACT_RU_VARIABLE 
    add constraint ACT_FK_VAR_EXE 
    foreign key (EXECUTION_ID_) 
    references ACT_RU_EXECUTION (ID_);

alter table ACT_RU_VARIABLE
    add constraint ACT_FK_VAR_PROCINST
    foreign key (PROC_INST_ID_)
    references ACT_RU_EXECUTION(ID_);

alter table ACT_RU_VARIABLE 
    add constraint ACT_FK_VAR_BYTEARRAY 
    foreign key (BYTEARRAY_ID_) 
    references ACT_GE_BYTEARRAY (ID_);

alter table ACT_RU_JOB 
    add constraint ACT_FK_JOB_EXCEPTION 
    foreign key (EXCEPTION_STACK_ID_) 
    references ACT_GE_BYTEARRAY (ID_);

alter table ACT_RU_EVENT_SUBSCR
    add constraint ACT_FK_EVENT_EXEC
    foreign key (EXECUTION_ID_)
    references ACT_RU_EXECUTION(ID_);
/* new file */
use activiti;

create table ACT_HI_PROCINST (
    ID_ varchar(64) not null,
    PROC_INST_ID_ varchar(64) not null,
    BUSINESS_KEY_ varchar(255),
    PROC_DEF_ID_ varchar(64) not null,
    START_TIME_ datetime not null,
    END_TIME_ datetime,
    DURATION_ bigint,
    START_USER_ID_ varchar(255),
    START_ACT_ID_ varchar(255),
    END_ACT_ID_ varchar(255),
    SUPER_PROCESS_INSTANCE_ID_ varchar(64),
    DELETE_REASON_ varchar(4000),
    primary key (ID_),
    unique (PROC_INST_ID_),
    unique ACT_UNIQ_HI_BUS_KEY (PROC_DEF_ID_, BUSINESS_KEY_)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_bin;

create table ACT_HI_ACTINST (
    ID_ varchar(64) not null,
    PROC_DEF_ID_ varchar(64) not null,
    PROC_INST_ID_ varchar(64) not null,
    EXECUTION_ID_ varchar(64) not null,
    ACT_ID_ varchar(255) not null,
    ACT_NAME_ varchar(255),
    ACT_TYPE_ varchar(255) not null,
    ASSIGNEE_ varchar(64),
    START_TIME_ datetime not null,
    END_TIME_ datetime,
    DURATION_ bigint,
    primary key (ID_)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_bin;

create table ACT_HI_TASKINST (
    ID_ varchar(64) not null,
    PROC_DEF_ID_ varchar(64),
    TASK_DEF_KEY_ varchar(255),
    PROC_INST_ID_ varchar(64),
    EXECUTION_ID_ varchar(64),
    NAME_ varchar(255),
    PARENT_TASK_ID_ varchar(64),
    DESCRIPTION_ varchar(4000),
    OWNER_ varchar(64),
    ASSIGNEE_ varchar(64),
    START_TIME_ datetime not null,
    END_TIME_ datetime,
    DURATION_ bigint,
    DELETE_REASON_ varchar(4000),
    PRIORITY_ integer,
    DUE_DATE_ datetime,
    primary key (ID_)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_bin;

create table ACT_HI_DETAIL (
    ID_ varchar(64) not null,
    TYPE_ varchar(255) not null,
    PROC_INST_ID_ varchar(64) not null,
    EXECUTION_ID_ varchar(64) not null,
    TASK_ID_ varchar(64),
    ACT_INST_ID_ varchar(64),
    NAME_ varchar(255) not null,
    VAR_TYPE_ varchar(255),
    REV_ integer,
    TIME_ datetime not null,
    BYTEARRAY_ID_ varchar(64),
    DOUBLE_ double,
    LONG_ bigint,
    TEXT_ varchar(4000),
    TEXT2_ varchar(4000),
    primary key (ID_)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_bin;

create table ACT_HI_COMMENT (
    ID_ varchar(64) not null,
    TYPE_ varchar(255),
    TIME_ datetime not null,
    USER_ID_ varchar(255),
    TASK_ID_ varchar(64),
    PROC_INST_ID_ varchar(64),
    ACTION_ varchar(255),
    MESSAGE_ varchar(4000),
    FULL_MSG_ LONGBLOB,
    primary key (ID_)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_bin;

create table ACT_HI_ATTACHMENT (
    ID_ varchar(64) not null,
    REV_ integer,
    USER_ID_ varchar(255),
    NAME_ varchar(255),
    DESCRIPTION_ varchar(4000),
    TYPE_ varchar(255),
    TASK_ID_ varchar(64),
    PROC_INST_ID_ varchar(64),
    URL_ varchar(4000),
    CONTENT_ID_ varchar(64),
    primary key (ID_)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_bin;

create index ACT_IDX_HI_PRO_INST_END on ACT_HI_PROCINST(END_TIME_);
create index ACT_IDX_HI_PRO_I_BUSKEY on ACT_HI_PROCINST(BUSINESS_KEY_);
create index ACT_IDX_HI_ACT_INST_START on ACT_HI_ACTINST(START_TIME_);
create index ACT_IDX_HI_ACT_INST_END on ACT_HI_ACTINST(END_TIME_);
create index ACT_IDX_HI_DETAIL_PROC_INST on ACT_HI_DETAIL(PROC_INST_ID_);
create index ACT_IDX_HI_DETAIL_ACT_INST on ACT_HI_DETAIL(ACT_INST_ID_);
create index ACT_IDX_HI_DETAIL_TIME on ACT_HI_DETAIL(TIME_);
create index ACT_IDX_HI_DETAIL_NAME on ACT_HI_DETAIL(NAME_);
create index ACT_IDX_HI_DETAIL_TASK_ID on ACT_HI_DETAIL(TASK_ID_);
/* new file */
use activiti;

create table ACT_ID_GROUP (
    ID_ varchar(64),
    REV_ integer,
    NAME_ varchar(255),
    TYPE_ varchar(255),
    primary key (ID_)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_bin;

create table ACT_ID_MEMBERSHIP (
    USER_ID_ varchar(64),
    GROUP_ID_ varchar(64),
    primary key (USER_ID_, GROUP_ID_)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_bin;

create table ACT_ID_USER (
    ID_ varchar(64),
    REV_ integer,
    FIRST_ varchar(255),
    LAST_ varchar(255),
    EMAIL_ varchar(255),
    PWD_ varchar(255),
    PICTURE_ID_ varchar(64),
    primary key (ID_)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_bin;

create table ACT_ID_INFO (
    ID_ varchar(64),
    REV_ integer,
    USER_ID_ varchar(64),
    TYPE_ varchar(64),
    KEY_ varchar(255),
    VALUE_ varchar(255),
    PASSWORD_ LONGBLOB,
    PARENT_ID_ varchar(255),
    primary key (ID_)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_bin;

alter table ACT_ID_MEMBERSHIP 
    add constraint ACT_FK_MEMB_GROUP 
    foreign key (GROUP_ID_) 
    references ACT_ID_GROUP (ID_);

alter table ACT_ID_MEMBERSHIP 
    add constraint ACT_FK_MEMB_USER 
    foreign key (USER_ID_) 
    references ACT_ID_USER (ID_);

/* new file */
use openiam;

START TRANSACTION;

CREATE TABLE res_to_res_membership (
	RESOURCE_ID varchar(32) NOT NULL,
	MEMBER_RESOURCE_ID varchar(32) NOT NULL,
	CREATE_DATE TIMESTAMP NULL,
	UPDATE_DATE TIMESTAMP NULL,
	CREATED_BY varchar(32) NULL,
	UPDATED_BY varchar(32) NULL,
	UNIQUE(RESOURCE_ID, MEMBER_RESOURCE_ID),
	FOREIGN KEY (RESOURCE_ID) REFERENCES RES (RESOURCE_ID ),
	FOREIGN KEY (MEMBER_RESOURCE_ID) REFERENCES RES (RESOURCE_ID )
)  Engine=InnoDB;

DELIMITER $$

CREATE TRIGGER res_res_mem_insert
BEFORE
INSERT ON res_to_res_membership
	FOR EACH ROW
	BEGIN
		SET NEW.CREATE_DATE = NOW();
		SET NEW.UPDATE_DATE = NOW();
	END$$

DROP PROCEDURE IF EXISTS migrateResources$$

CREATE PROCEDURE migrateResources()
	BEGIN
		DECLARE done INT DEFAULT FALSE;
		DECLARE res_id, parent VARCHAR(32);		
		DECLARE cur1 CURSOR FOR (SELECT RESOURCE_ID, RESOURCE_PARENT FROM RES WHERE RESOURCE_PARENT IS NOT null);
		DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
		OPEN cur1;
		
		REPEAT 
			FETCH cur1 INTO res_id, parent;
			IF (res_id IS NOT NULL AND parent IS NOT NULL) THEN
				IF ((SELECT RESOURCE_ID FROM res_to_res_membership WHERE RESOURCE_ID=parent AND MEMBER_RESOURCE_ID=res_id) IS NULL) THEN
					INSERT INTO res_to_res_membership (RESOURCE_ID, MEMBER_RESOURCE_ID) VALUES(parent, res_id);
				END IF;
			END IF;
		UNTIL done END REPEAT; 
				
		
		CLOSE cur1;
	END$$
DELIMITER ;

call migrateResources();

DROP PROCEDURE migrateResources;

COMMIT;
/* new file */
use openiam;

START TRANSACTION;

CREATE TABLE grp_to_grp_membership (
	GROUP_ID varchar(32) NOT NULL,
	MEMBER_GROUP_ID varchar(32) NOT NULL,
	CREATE_DATE TIMESTAMP NULL,
	UPDATE_DATE TIMESTAMP NULL,
	CREATED_BY varchar(32) NULL,
	UPDATED_BY varchar(32) NULL,
	UNIQUE(GROUP_ID, MEMBER_GROUP_ID),
	FOREIGN KEY (GROUP_ID) REFERENCES GRP (GRP_ID ),
	FOREIGN KEY (MEMBER_GROUP_ID) REFERENCES GRP (GRP_ID )
)  Engine=InnoDB;

DELIMITER $$

CREATE TRIGGER grp_grp_mem_insert 
BEFORE 
INSERT ON grp_to_grp_membership 
	FOR EACH ROW
	BEGIN
		SET NEW.CREATE_DATE = NOW();
		SET NEW.UPDATE_DATE = NOW();
	END$$

DROP PROCEDURE IF EXISTS migrateGroups$$

CREATE PROCEDURE migrateGroups()
	BEGIN
		DECLARE done INT DEFAULT FALSE;
		DECLARE id, parent VARCHAR(32);		
		DECLARE cur1 CURSOR FOR (SELECT GRP_ID, PARENT_GRP_ID FROM GRP WHERE PARENT_GRP_ID IS NOT null AND INHERIT_FROM_PARENT=1);
		DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
		OPEN cur1;
		
		REPEAT 
			FETCH cur1 INTO id, parent;
			IF (id IS NOT NULL AND parent IS NOT NULL) THEN
				IF ((SELECT GROUP_ID FROM grp_to_grp_membership WHERE GROUP_ID=parent AND MEMBER_GROUP_ID=id) IS NULL) THEN
					INSERT INTO grp_to_grp_membership (GROUP_ID, MEMBER_GROUP_ID) VALUES(parent, id);
				END IF;
			END IF;
		UNTIL done END REPEAT; 
				
		
		CLOSE cur1;
	END$$

DELIMITER ;

call migrateGroups();

DROP PROCEDURE migrateGroups;

COMMIT;
/* new file */
use openiam;

START TRANSACTION;

/*DROP all references to the Role Table*/

ALTER TABLE GRP_ROLE DROP FOREIGN KEY FK_GRP_ROLE_ROLE;

ALTER TABLE GRP_ROLE DROP INDEX FK_GRP_ROLE_ROLE;

ALTER TABLE GRP_ROLE DROP PRIMARY KEY;

ALTER TABLE RESOURCE_ROLE DROP FOREIGN KEY FK_RESOURCE_ROLE_ROLE;

ALTER TABLE RESOURCE_ROLE DROP INDEX FK_RESOURCE_ROLE_ROLE;

ALTER TABLE RESOURCE_ROLE DROP FOREIGN KEY FK_RESOURCE_ROLE_RESOURCE;

ALTER TABLE RESOURCE_ROLE DROP PRIMARY KEY;

ALTER TABLE RESOURCE_ROLE ADD CONSTRAINT FK_RESOURCE_ROLE_RESOURCE FOREIGN KEY (RESOURCE_ID) REFERENCES RES(RESOURCE_ID);

ALTER TABLE ROLE_ATTRIBUTE DROP FOREIGN KEY FK_ROLE_ROLE_ATTRIBUTE;

ALTER TABLE ROLE_ATTRIBUTE DROP INDEX FK_ROLE_ROLE_ATTRIBUTE;

ALTER TABLE USER_ROLE DROP FOREIGN KEY FK_USR_ROLE_ROLE;

ALTER TABLE USER_ROLE DROP INDEX FK_USR_ROLE_ROLE;

ALTER TABLE USER_ROLE DROP PRIMARY KEY;

ALTER TABLE ROLE_POLICY DROP FOREIGN KEY ROLE_POLICY_ibfk_1; # this might break

ALTER TABLE ROLE_POLICY DROP INDEX ROLE_ID;

DROP TABLE ROLE_ENTITLEMENT;

DROP VIEW USER_ROLE_VW;

ALTER TABLE RESOURCE_POLICY DROP FOREIGN KEY RS_PL_RL_RLID;

ALTER TABLE RESOURCE_POLICY DROP KEY RS_PL_RL_RLID;

ALTER TABLE PERMISSIONS DROP PRIMARY KEY;

ALTER TABLE ROLE DROP FOREIGN KEY FK_ROLE_SERVICE;

ALTER TABLE ROLE DROP INDEX FK_ROLE_SERVICE;

ALTER TABLE ROLE DROP PRIMARY KEY;

ALTER TABLE ROLE ADD CONSTRAINT FK_ROLE_SERVICE FOREIGN KEY (SERVICE_ID) REFERENCES SECURITY_DOMAIN(DOMAIN_ID);

/*Add the new ID, and populate it via stored procedure (no better way to do this)*/
ALTER TABLE ROLE ADD TEMP_ROLE_ID varchar(32) NULL;

DELIMITER $$

DROP PROCEDURE IF EXISTS generateSimpleRoleId$$

CREATE PROCEDURE generateSimpleRoleId()
	BEGIN
		DECLARE done INT DEFAULT FALSE;
		DECLARE role, service, roleId VARCHAR(32);		
		DECLARE newId INT DEFAULT 1;
		DECLARE cur1 CURSOR FOR (SELECT ROLE_ID, SERVICE_ID, TEMP_ROLE_ID FROM ROLE);
		DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
		OPEN cur1;
		
		REPEAT 
			FETCH cur1 INTO role, service, roleId;
			IF (roleId IS NULL) THEN
				UPDATE ROLE SET TEMP_ROLE_ID=newId WHERE SERVICE_ID=service AND ROLE_ID=role;
				SET newId = newId + 1;
			END IF;
		UNTIL done END REPEAT; 
				
		
		CLOSE cur1;
	END$$
DELIMITER ;

call generateSimpleRoleId();

DROP PROCEDURE generateSimpleRoleId;

/*create the reference column on all tables referencing ROLE, and populate it*/
ALTER TABLE GRP_ROLE ADD TEMP_ROLE_ID varchar(32) NULL;

UPDATE GRP_ROLE r SET TEMP_ROLE_ID= (
	SELECT TEMP_ROLE_ID FROM ROLE WHERE ROLE_ID=r.ROLE_ID AND SERVICE_ID=r.SERVICE_ID
);

ALTER TABLE RESOURCE_ROLE ADD TEMP_ROLE_ID varchar(32) NULL;

UPDATE RESOURCE_ROLE r SET TEMP_ROLE_ID= (
	SELECT TEMP_ROLE_ID FROM ROLE WHERE ROLE_ID=r.ROLE_ID AND SERVICE_ID=r.SERVICE_ID
);

ALTER TABLE ROLE_ATTRIBUTE ADD TEMP_ROLE_ID varchar(32) NULL;

UPDATE ROLE_ATTRIBUTE r SET TEMP_ROLE_ID= (
	SELECT TEMP_ROLE_ID FROM ROLE WHERE ROLE_ID=r.ROLE_ID AND SERVICE_ID=r.SERVICE_ID
);

ALTER TABLE USER_ROLE ADD TEMP_ROLE_ID varchar(32) NULL;

UPDATE USER_ROLE r SET TEMP_ROLE_ID= (
	SELECT TEMP_ROLE_ID FROM ROLE WHERE ROLE_ID=r.ROLE_ID AND SERVICE_ID=r.SERVICE_ID
);

ALTER TABLE ROLE_POLICY ADD TEMP_ROLE_ID varchar(32) NULL;

UPDATE ROLE_POLICY r SET TEMP_ROLE_ID= (
	SELECT TEMP_ROLE_ID FROM ROLE WHERE ROLE_ID=r.ROLE_ID AND SERVICE_ID=r.SERVICE_ID
);

ALTER TABLE RESOURCE_POLICY ADD TEMP_ROLE_ID varchar(32) NULL;

UPDATE RESOURCE_POLICY r SET TEMP_ROLE_ID= (
	SELECT TEMP_ROLE_ID FROM ROLE WHERE ROLE_ID=r.ROLE_ID AND SERVICE_ID=r.SERVICE_ID
);

ALTER TABLE PERMISSIONS ADD COLUMN TEMP_ROLE_ID varchar(32);

UPDATE PERMISSIONS r SET TEMP_ROLE_ID=(
	SELECT TEMP_ROLE_ID FROM ROLE WHERE ROLE_ID=r.ROLE_ID AND SERVICE_ID=r.SERVICE_ID
);

/*drop the old column that referenced the composite key*/
ALTER TABLE GRP_ROLE DROP COLUMN SERVICE_ID;

ALTER TABLE GRP_ROLE DROP COLUMN ROLE_ID;

ALTER TABLE RESOURCE_ROLE DROP COLUMN SERVICE_ID;

ALTER TABLE RESOURCE_ROLE DROP COLUMN ROLE_ID;

ALTER TABLE ROLE_ATTRIBUTE DROP COLUMN SERVICE_ID;

ALTER TABLE ROLE_ATTRIBUTE DROP COLUMN ROLE_ID;

ALTER TABLE USER_ROLE DROP COLUMN SERVICE_ID;

ALTER TABLE USER_ROLE DROP COLUMN ROLE_ID;

ALTER TABLE ROLE_POLICY DROP COLUMN SERVICE_ID;

ALTER TABLE ROLE_POLICY DROP COLUMN ROLE_ID;

ALTER TABLE RESOURCE_POLICY DROP COLUMN SERVICE_ID;

ALTER TABLE RESOURCE_POLICY DROP COLUMN ROLE_ID;

ALTER TABLE PERMISSIONS DROP COLUMN SERVICE_ID;

ALTER TABLE PERMISSIONS DROP COLUMN ROLE_ID;

ALTER TABLE ROLE DROP COLUMN ROLE_ID;

/*rename the TEMP_ROLE_ID columns to be ROLE_ID NOT NULL*/
alter table GRP_ROLE CHANGE TEMP_ROLE_ID ROLE_ID varchar(32) NOT NULL;

alter table RESOURCE_ROLE CHANGE TEMP_ROLE_ID ROLE_ID varchar(32) NOT NULL;

alter table ROLE_ATTRIBUTE CHANGE TEMP_ROLE_ID ROLE_ID varchar(32) NOT NULL;

alter table USER_ROLE CHANGE TEMP_ROLE_ID ROLE_ID varchar(32) NOT NULL;

alter table ROLE_POLICY CHANGE TEMP_ROLE_ID ROLE_ID varchar(32) NOT NULL;

alter table RESOURCE_POLICY CHANGE TEMP_ROLE_ID ROLE_ID varchar(32) NOT NULL;

alter table ROLE CHANGE TEMP_ROLE_ID ROLE_ID varchar(32) NOT NULL;

/* it is possible that PERMISSIONS records did not map to an existing Role or Menu - delete those */
DELETE FROM PERMISSIONS WHERE TEMP_ROLE_ID IS NULL OR TEMP_ROLE_ID='';
DELETE FROM PERMISSIONS WHERE MENU_ID NOT IN (
	SELECT MENU_ID FROM MENU
);

alter table PERMISSIONS CHANGE TEMP_ROLE_ID ROLE_ID varchar(32) NOT NULL;

/*make ROLE_ID primary on ROLE*/
ALTER TABLE ROLE ADD PRIMARY KEY (ROLE_ID);

/*add foreign keys to the new column*/
ALTER TABLE GRP_ROLE ADD CONSTRAINT FK_GRP_ROLE_ROLE FOREIGN KEY(ROLE_ID) REFERENCES ROLE(ROLE_ID);

ALTER TABLE RESOURCE_ROLE ADD CONSTRAINT FK_RESOURCE_ROLE_ROLE FOREIGN KEY(ROLE_ID) REFERENCES ROLE(ROLE_ID);

ALTER TABLE ROLE_ATTRIBUTE ADD CONSTRAINT FK_ROLE_ROLE_ATTRIBUTE FOREIGN KEY(ROLE_ID) REFERENCES ROLE(ROLE_ID);

ALTER TABLE USER_ROLE ADD CONSTRAINT FK_USR_ROLE_ROLE FOREIGN KEY(ROLE_ID) REFERENCES ROLE(ROLE_ID);

ALTER TABLE ROLE_POLICY ADD CONSTRAINT FK_ROLE_POLICY_ROLE FOREIGN KEY(ROLE_ID) REFERENCES ROLE(ROLE_ID);

ALTER TABLE RESOURCE_POLICY ADD CONSTRAINT FK_RESOURCE_POLICY_ROLE FOREIGN KEY(ROLE_ID) REFERENCES ROLE(ROLE_ID);

ALTER TABLE PERMISSIONS ADD CONSTRAINT FK_PERMISSIONS_ROLE FOREIGN KEY(ROLE_ID) REFERENCES ROLE(ROLE_ID);

ALTER TABLE PERMISSIONS ADD CONSTRAINT FK_PERMISSIONS_MENU FOREIGN KEY(MENU_ID) REFERENCES MENU(MENU_ID);

/*recreate primary keys*/
ALTER TABLE GRP_ROLE ADD PRIMARY KEY (GRP_ID, ROLE_ID);

ALTER TABLE RESOURCE_ROLE ADD PRIMARY KEY (RESOURCE_ID, ROLE_ID, PRIVILEGE_ID);

ALTER TABLE USER_ROLE add PRIMARY KEY (ROLE_ID, USER_ID);

ALTER TABLE PERMISSIONS ADD PRIMARY KEY (MENU_ID, ROLE_ID);

/*make the ROLE names unique, if not already*/
DELIMITER $$

DROP PROCEDURE IF EXISTS makeRoleNamesUnique$$

CREATE PROCEDURE makeRoleNamesUnique()
	BEGIN
		DECLARE done INT DEFAULT FALSE;
		DECLARE id VARCHAR(32);
		DECLARE name VARCHAR(80);
		DECLARE service VARCHAR(20);
		DECLARE newId INT DEFAULT 1;
		DECLARE cur1 CURSOR FOR (SELECT ROLE_ID, SERVICE_ID, ROLE_NAME FROM ROLE);
		DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
		OPEN cur1;
		
		REPEAT 
			FETCH cur1 INTO id, service, name;
			IF ((SELECT count(*) FROM ROLE WHERE ROLE_NAME=name) > 1) THEN
				UPDATE ROLE SET ROLE_NAME= CONCAT(name, '_',service) WHERE ROLE_ID=id;
			END IF;
		UNTIL done END REPEAT; 
				
		
		CLOSE cur1;
	END$$
DELIMITER ;

call makeRoleNamesUnique();

DROP PROCEDURE makeRoleNamesUnique;

/*add the unique constraint*/
ALTER TABLE ROLE ADD UNIQUE(ROLE_NAME);

COMMIT;
/* new file */
use openiam;

ALTER TABLE RESOURCE_ROLE DROP FOREIGN KEY FK_RESOURCE_ROLE_RESOURCE;
ALTER TABLE RESOURCE_ROLE DROP FOREIGN KEY FK_RESOURCE_ROLE_ROLE;
ALTER TABLE RESOURCE_ROLE DROP INDEX FK_RESOURCE_ROLE_ROLE;
ALTER TABLE RESOURCE_ROLE DROP PRIMARY KEY;
ALTER TABLE RESOURCE_ROLE DROP COLUMN PRIVILEGE_ID;
ALTER TABLE RESOURCE_ROLE DROP COLUMN PERMIT;
ALTER TABLE RESOURCE_ROLE ADD CONSTRAINT FK_RESOURCE_ROLE_RESOURCE FOREIGN KEY (RESOURCE_ID) REFERENCES RES(RESOURCE_ID);
ALTER TABLE RESOURCE_ROLE ADD CONSTRAINT FK_RESOURCE_ROLE_ROLE FOREIGN KEY(ROLE_ID) REFERENCES ROLE(ROLE_ID);
ALTER TABLE RESOURCE_ROLE ADD PRIMARY KEY (RESOURCE_ID, ROLE_ID);
/* new file */
use openiam;

START TRANSACTION;

CREATE TABLE role_to_role_membership (
	ROLE_ID varchar(32) NOT NULL,
	MEMBER_ROLE_ID varchar(32) NOT NULL,
	CREATE_DATE TIMESTAMP NULL,
	UPDATE_DATE TIMESTAMP NULL,
	CREATED_BY varchar(32) NULL,
	UPDATED_BY varchar(32) NULL,
	UNIQUE(ROLE_ID, MEMBER_ROLE_ID),
	FOREIGN KEY ROLE_ROLE_MMSP_ROLE_ID (ROLE_ID) REFERENCES ROLE (ROLE_ID ),
	FOREIGN KEY ROLE_ROLE_MMSP_MEMBER_ROLE_ID (MEMBER_ROLE_ID) REFERENCES ROLE (ROLE_ID )
)  Engine=InnoDB;

DELIMITER $$

CREATE TRIGGER role_role_mem_insert 
BEFORE 
INSERT ON role_to_role_membership 
	FOR EACH ROW
	BEGIN
		SET NEW.CREATE_DATE = NOW();
		SET NEW.UPDATE_DATE = NOW();
	END$$

DROP PROCEDURE IF EXISTS migrateRoles$$

CREATE PROCEDURE migrateRoles()
	BEGIN
		DECLARE done INT DEFAULT FALSE;
		DECLARE id, parent VARCHAR(32);		
		DECLARE cur1 CURSOR FOR (SELECT ROLE_ID, PARENT_ROLE_ID FROM ROLE WHERE PARENT_ROLE_ID IS NOT null AND INHERIT_FROM_PARENT=1);
		DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
		OPEN cur1;
		
		REPEAT 
			FETCH cur1 INTO id, parent;
			IF (id IS NOT NULL AND parent IS NOT NULL) THEN
				IF ((SELECT ROLE_ID FROM role_to_role_membership WHERE ROLE_ID=parent AND MEMBER_ROLE_ID=id) IS NULL) THEN
					INSERT INTO role_to_role_membership (ROLE_ID, MEMBER_ROLE_ID) VALUES(parent, id);
				END IF;
			END IF;
		UNTIL done END REPEAT; 
				
		
		CLOSE cur1;
	END$$

DELIMITER ;

call migrateRoles();

DROP PROCEDURE migrateRoles;

COMMIT;
/* new file */
use openiam;

START TRANSACTION;

DELIMITER $$

/*make group names unique*/
DROP PROCEDURE IF EXISTS makeGroupNamesUnique$$

CREATE PROCEDURE makeGroupNamesUnique()
	BEGIN
		DECLARE done INT DEFAULT FALSE;
		DECLARE groupName, groupId VARCHAR(32);		
		DECLARE group_idx INT DEFAULT 1;
		DECLARE cur1 CURSOR FOR SELECT GRP_NAME, GRP_ID FROM GRP WHERE GRP_NAME IN ( SELECT GRP_NAME FROM GRP GROUP BY GRP_NAME HAVING count(GRP_NAME) > 1 );
		DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
		OPEN cur1;
		
		REPEAT 
			FETCH cur1 INTO groupName, groupId;
			IF ((groupName IS NOT NULL) AND (groupId IS NOT NULL)) THEN
				UPDATE GRP SET GRP_NAME=CONCAT(groupName, "_", group_idx) WHERE GRP_ID=groupId;
				SET group_idx = group_idx + 1;
			END IF;
		UNTIL done END REPEAT; 
				
		CLOSE cur1;
	END$$
DELIMITER ;

call makeGroupNamesUnique();

DROP PROCEDURE makeGroupNamesUnique;

DELIMITER $$

/*make role names unique*/
DROP PROCEDURE IF EXISTS makeResourceNamesUnique;

CREATE PROCEDURE makeResourceNamesUnique()
	BEGIN
		DECLARE done INT DEFAULT FALSE;
		DECLARE resourceName, resourceId VARCHAR(32);		
		DECLARE res_idx INT DEFAULT 1;
		DECLARE cur1 CURSOR FOR SELECT NAME, RESOURCE_ID FROM RES WHERE NAME IN ( SELECT NAME FROM RES GROUP BY NAME HAVING count(NAME) > 1 );
		DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
		OPEN cur1;
		
		REPEAT 
			FETCH cur1 INTO resourceName, resourceId;
			IF ((resourceName IS NOT NULL) AND (resourceId IS NOT NULL)) THEN
				UPDATE RES SET NAME=CONCAT(resourceName, "_", res_idx) WHERE RESOURCE_ID=resourceId;
				SET res_idx = res_idx + 1;
			END IF;
		UNTIL done END REPEAT; 
				
		CLOSE cur1;
	END$$
DELIMITER ;

call makeResourceNamesUnique();

DROP PROCEDURE makeResourceNamesUnique;


ALTER TABLE GRP ADD UNIQUE(GRP_NAME);

ALTER TABLE RES ADD UNIQUE(NAME);

COMMIT;
/* new file */
use openiam;

ALTER TABLE RES ADD COLUMN MIN_AUTH_LEVEL VARCHAR(32);

ALTER TABLE RES ADD COLUMN DOMAIN VARCHAR(64);

ALTER TABLE RES ADD COLUMN IS_PUBLIC CHAR(1) DEFAULT 'Y';

ALTER TABLE RES ADD COLUMN IS_SSL CHAR(1) DEFAULT 'N';
/* new file */
INSERT INTO RESOURCE_TYPE (RESOURCE_TYPE_ID, DESCRIPTION, METADATA_TYPE_ID) VALUES('MENU_ITEM', 'Menus', 'MENU_ITEM');

START TRANSACTION;

DELIMITER $$

DROP PROCEDURE IF EXISTS copyMenuDataIntoResources$$

CREATE PROCEDURE copyMenuDataIntoResources()
	BEGIN
		DECLARE done INT DEFAULT FALSE;
		DECLARE resourceId, parentResourceId VARCHAR(32);
		DECLARE menuId, menuGroup, menuName, menuDescription, menuUrl VARCHAR(32);		
		DECLARE displayOrder INT DEFAULT null;
		DECLARE cur2 CURSOR FOR (SELECT MENU_ID, MENU_GROUP, MENU_NAME, MENU_DESC, URL, DISPLAY_ORDER FROM MENU WHERE MENU_ID IN(
			SELECT MENU_GROUP FROM MENU WHERE MENU_GROUP IS NOT NULL
		));
		DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
		OPEN cur2;
		
		REPEAT
			FETCH cur2 INTO menuId, menuGroup, menuName, menuDescription, menuUrl, displayOrder;
			SET resourceId = CONCAT(menuId, '');
			IF ((SELECT RESOURCE_ID FROM RES WHERE RESOURCE_ID=resourceId) IS NULL) THEN
				INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, DESCRIPTION, NAME, URL, IS_PUBLIC, DISPLAY_ORDER) VALUES(resourceId, 'MENU_ITEM', menuDescription, resourceId, menuUrl, 'N', displayOrder);
				INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES (CONCAT(resourceId, '_MENU_DISPLAY'), resourceId, 'MENU_DISPLAY_NAME', menuName);
			END IF;
		UNTIL done END REPEAT;
		
		CLOSE cur2;
	END$$
DELIMITER ;

call copyMenuDataIntoResources();

DROP PROCEDURE copyMenuDataIntoResources;

DELIMITER $$

DROP PROCEDURE IF EXISTS copyMenuDataIntoResources2$$

CREATE PROCEDURE copyMenuDataIntoResources2()
	BEGIN
		DECLARE done INT DEFAULT FALSE;
		DECLARE resourceId, parentResourceId VARCHAR(32);
		DECLARE menuId, menuGroup, menuName, menuDescription, menuUrl VARCHAR(32);
		DECLARE newResourceName VARCHAR(32);
		DECLARE displayOrder INT DEFAULT null;
		DECLARE name_idx INT DEFAULT 0;
		DECLARE cur1 CURSOR FOR (SELECT MENU_ID, MENU_GROUP, MENU_NAME, MENU_DESC, URL, DISPLAY_ORDER FROM MENU);
		DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
		OPEN cur1;
		
		REPEAT
			FETCH cur1 INTO menuId, menuGroup, menuName, menuDescription, menuUrl, displayOrder;
			SET resourceId = CONCAT(menuId, '');
			SET parentResourceId = CONCAT(menuGroup, '');
			SET newResourceName = menuName;
			
			IF((SELECT NAME FROM RES WHERE NAME=menuName) IS NOT NULL) THEN
				SET newResourceName = concat(menuName, '_', name_idx);
				SET name_idx = name_idx + 1;
			END IF;
			
			IF ((SELECT RESOURCE_ID FROM RES WHERE RESOURCE_ID=resourceId) IS NULL) THEN
				INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, DESCRIPTION, NAME, URL, IS_PUBLIC, DISPLAY_ORDER) VALUES(resourceId, 'MENU_ITEM', menuDescription, resourceId, menuUrl, 'N', displayOrder);
				INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES (CONCAT(resourceId, '_MENU_DISPLAY'), resourceId, 'MENU_DISPLAY_NAME', menuName);
			END IF;
			
			IF(parentResourceId IS NOT NULL AND resourceId IS NOT NULL) THEN
				IF((SELECT RESOURCE_ID FROM res_to_res_membership WHERE RESOURCE_ID=parentResourceId AND MEMBER_RESOURCE_ID=resourceId) IS NULL) THEN
					INSERT INTO res_to_res_membership (RESOURCE_ID, MEMBER_RESOURCE_ID) VALUES(parentResourceId, resourceId);
				END IF;
			END IF;
		UNTIL done END REPEAT; 
		
		CLOSE cur1;
	END$$
DELIMITER ;

call copyMenuDataIntoResources2();

DROP PROCEDURE copyMenuDataIntoResources2;

DELIMITER $$

DROP PROCEDURE IF EXISTS migratePermissions$$

CREATE PROCEDURE migratePermissions()
	BEGIN
		DECLARE done INT DEFAULT FALSE;
		DECLARE menuId, roleId, resourceId VARCHAR(32);
		DECLARE cur1 CURSOR FOR (SELECT MENU_ID, ROLE_ID FROM PERMISSIONS);
		DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
		OPEN cur1;
		
		REPEAT
			FETCH cur1 INTO menuId, roleId;
			SET resourceId = CONCAT(menuId, '');
			IF ( (SELECT RESOURCE_ID FROM RESOURCE_ROLE WHERE RESOURCE_ID=resourceId AND ROLE_ID=roleId) IS NULL) THEN
				INSERT INTO RESOURCE_ROLE (RESOURCE_ID, ROLE_ID) VALUES(resourceId, roleId);
			END IF;
		UNTIL done END REPEAT; 
		
		CLOSE cur1;
	END$$
DELIMITER ;

call migratePermissions();

DROP PROCEDURE migratePermissions;

DELETE FROM res_to_res_membership WHERE RESOURCE_ID IN('ROOT');
DELETE FROM RESOURCE_PROP WHERE RESOURCE_ID IN('ROOT');
DELETE FROM RESOURCE_ROLE WHERE RESOURCE_ID IN('ROOT');
DELETE FROM RES WHERE RESOURCE_ID IN('ROOT');

INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES (CONCAT('IDM', '_MENU_PUBLIC'), 'IDM', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES (CONCAT('SELFSERVICE', '_MENU_PUBLIC'), 'SELFSERVICE', 'MENU_IS_PUBLIC', 'true');

/* new file */

use openiam;

DELETE FROM res_to_res_membership WHERE RESOURCE_ID IN(
	SELECT RESOURCE_ID FROM RES WHERE NAME IS NULL
);

DELETE FROM res_to_res_membership WHERE MEMBER_RESOURCE_ID IN(
	SELECT RESOURCE_ID FROM RES WHERE NAME IS NULL
);

DELETE FROM RESOURCE_GROUP WHERE RESOURCE_ID IN(
	SELECT RESOURCE_ID FROM RES WHERE NAME IS NULL
);

DELETE FROM RESOURCE_PRIVILEGE WHERE RESOURCE_ID IN(
	SELECT RESOURCE_ID FROM RES WHERE NAME IS NULL
);

DELETE FROM RESOURCE_POLICY WHERE RESOURCE_ID IN(
	SELECT RESOURCE_ID FROM RES WHERE NAME IS NULL
);

DELETE FROM RESOURCE_PROP WHERE RESOURCE_ID IN(
	SELECT RESOURCE_ID FROM RES WHERE NAME IS NULL
);

DELETE FROM RESOURCE_ROLE WHERE RESOURCE_ID IN(
	SELECT RESOURCE_ID FROM RES WHERE NAME IS NULL
);

DELETE FROM RESOURCE_USER WHERE RESOURCE_ID IN(
	SELECT RESOURCE_ID FROM RES WHERE NAME IS NULL
);

DELETE FROM RES WHERE NAME IS NULL;

ALTER TABLE RES MODIFY COLUMN NAME VARCHAR(40) NOT NULL;

ALTER TABLE RES MODIFY COLUMN RESOURCE_TYPE_ID VARCHAR(20) NOT NULL;
/* new file */
ALTER TABLE RES ADD IS_URL_PROTECTOR CHAR(1) DEFAULT 'N';

UPDATE RES SET IS_URL_PROTECTOR = 'N';

ALTER TABLE RES MODIFY COLUMN IS_URL_PROTECTOR CHAR(1) NOT NULL DEFAULT 'N';
/* new file */
use openiam;

DELETE FROM GRP_ATTRIBUTES WHERE GRP_ID IS NULL;
DELETE FROM GRP_ROLE WHERE GRP_ID IS NULL;
DELETE FROM grp_to_grp_membership WHERE GROUP_ID IS NULL OR MEMBER_GROUP_ID IS NULL;
DELETE FROM RESOURCE_GROUP WHERE GRP_ID IS NULL;
DELETE FROM USER_GRP WHERE GRP_ID IS NULL;
DELETE FROM GRP WHERE GRP_ID IS NULL;

ALTER TABLE GRP_ATTRIBUTES MODIFY COLUMN GRP_ID VARCHAR(32) NOT NULL;
ALTER TABLE GRP_ROLE MODIFY COLUMN GRP_ID VARCHAR(32) NOT NULL;
ALTER TABLE RESOURCE_GROUP MODIFY COLUMN GRP_ID VARCHAR(32) NOT NULL;
ALTER TABLE USER_GRP MODIFY COLUMN GRP_ID VARCHAR(32) NOT NULL;
ALTER TABLE GRP MODIFY COLUMN GRP_ID VARCHAR(32) NOT NULL;


DELETE FROM RESOURCE_GROUP;

ALTER TABLE RESOURCE_GROUP ADD CONSTRAINT UNIQUE_RESOURCE_GROUP UNIQUE (GRP_ID, RESOURCE_ID);
/* new file */
use openiam;

UPDATE USERS SET COMPANY_ID=null WHERE COMPANY_ID='';

ALTER TABLE USERS
  ADD CONSTRAINT FK_USERS_COMPANY FOREIGN KEY (COMPANY_ID) REFERENCES COMPANY (COMPANY_ID),
  ADD INDEX FK_USERS_COMPANY (COMPANY_ID ASC);

/* new file */
use openiam;

ALTER TABLE RES DROP COLUMN NODE_LEVEL;
ALTER TABLE RES DROP COLUMN SENSITIVE_APP;
ALTER TABLE RES DROP COLUMN RESOURCE_PARENT;


ALTER TABLE ROLE DROP COLUMN PROVISION_OBJ_NAME;
ALTER TABLE ROLE DROP COLUMN PARENT_ROLE_ID;
ALTER TABLE ROLE DROP COLUMN INHERIT_FROM_PARENT;
ALTER TABLE ROLE DROP COLUMN ROLE_APPROVER_ID;
ALTER TABLE ROLE DROP COLUMN ROLE_END_DATE;
/* new file */
use openiam;

DELETE FROM GRP_ROLE WHERE ROLE_ID IN(SELECT ROLE_ID FROM ROLE WHERE ROLE_NAME IS NULL);
DELETE FROM PERMISSIONS WHERE ROLE_ID IN(SELECT ROLE_ID FROM ROLE WHERE ROLE_NAME IS NULL);
DELETE FROM RESOURCE_POLICY WHERE ROLE_ID IN(SELECT ROLE_ID FROM ROLE WHERE ROLE_NAME IS NULL);
DELETE FROM RESOURCE_ROLE WHERE ROLE_ID IN(SELECT ROLE_ID FROM ROLE WHERE ROLE_NAME IS NULL);
DELETE FROM ROLE_ATTRIBUTE WHERE ROLE_ID IN(SELECT ROLE_ID FROM ROLE WHERE ROLE_NAME IS NULL);
DELETE FROM ROLE_POLICY WHERE ROLE_ID IN(SELECT ROLE_ID FROM ROLE WHERE ROLE_NAME IS NULL);
DELETE FROM USER_ROLE WHERE ROLE_ID IN(SELECT ROLE_ID FROM ROLE WHERE ROLE_NAME IS NULL);
DELETE FROM role_to_role_membership WHERE ROLE_ID IN(SELECT ROLE_ID FROM ROLE WHERE ROLE_NAME IS NULL);
DELETE FROM role_to_role_membership WHERE MEMBER_ROLE_ID IN(SELECT ROLE_ID FROM ROLE WHERE ROLE_NAME IS NULL);
ALTER TABLE ROLE MODIFY COLUMN ROLE_NAME VARCHAR(80) NOT NULL;
/* new file */
UPDATE RES SET URL='/webconsole/resources.html' WHERE RESOURCE_ID='SECURITY_RES';

INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION) VALUES('RESOURCE_MENU_ROOT', 'MENU_ITEM', 'RESOURCE_MENU_ROOT', 'Root for Resource Context Menu');

UPDATE res_to_res_membership SET RESOURCE_ID='RESOURCE_MENU_ROOT' WHERE RESOURCE_ID='SECURITY_RES';

UPDATE RES SET URL='/webconsole/resources.html' WHERE RESOURCE_ID='RESSUMMARY';

INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION, URL) VALUES('CREATE_RESOURCE_MENU', 'MENU_ITEM', 'CREATE_RESOURCE_MENU', 'Resource for Menu Creation', '/webconsole/newResource.html');

INSERT INTO res_to_res_membership (RESOURCE_ID, MEMBER_RESOURCE_ID) VALUES('RESOURCE_MENU_ROOT', 'CREATE_RESOURCE_MENU');

INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('CR_RES_DISP_NAME', 'CREATE_RESOURCE_MENU', 'MENU_DISPLAY_NAME', 'Create New Resource');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('CR_RES_MENU_PUB', 'CREATE_RESOURCE_MENU', 'MENU_IS_PUBLIC', 'true'); 
/* update menus to have 'resouce page' */
UPDATE RES SET URL='/webconsole/editResource.html' WHERE RESOURCE_ID='CREATE_RESOURCE_MENU';



INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME) VALUES('RESOURCE_EDIT_PAGE_ROOT', 'MENU_ITEM', 'RESOURCE_EDIT_PAGE_ROOT');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('RESOURCE_EDIT_PAGE_ROOT_PUB', 'RESOURCE_EDIT_PAGE_ROOT', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('RESOURCE_EDIT_PAGE_ROOT_DIS', 'RESOURCE_EDIT_PAGE_ROOT', 'MENU_DISPLAY_NAME', 'Resource Edit Page Root');

INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION, URL) VALUES('EDIT_RESOURCE', 'MENU_ITEM', 'EDIT_RESOURCE', 'Edit Resource','/webconsole/editResource.html');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('EDIT_RESOURCE_PUB', 'EDIT_RESOURCE', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('EDIT_RESOURCE_DIS', 'EDIT_RESOURCE', 'MENU_DISPLAY_NAME', 'Edit Resource');

INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION, URL) VALUES('RES_ATTR_PAGE', 'MENU_ITEM', 'RES_ATTR_PAGE', 'Resource Attributes','/webconsole/resourceAttributes.html');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('RES_ATTR_PAGE_PUB', 'RES_ATTR_PAGE', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('RES_ATTR_PAGE_DIS', 'RES_ATTR_PAGE', 'MENU_DISPLAY_NAME', 'Attributes & Patterns');

INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION, URL) VALUES('RES_ENT_SUB', 'MENU_ITEM', 'RES_ENT_SUB', 'Resouce Entitlements','/webconsole/resourceEntitlements.html');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('RES_ENT_SUB_PUB', 'RES_ENT_SUB', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('RES_ENT_SUB_DIS', 'RES_ENT_SUB', 'MENU_DISPLAY_NAME', 'Entitlements');


INSERT INTO res_to_res_membership (RESOURCE_ID, MEMBER_RESOURCE_ID) VALUES('RESOURCE_EDIT_PAGE_ROOT', 'RES_ENT_SUB');
INSERT INTO res_to_res_membership (RESOURCE_ID, MEMBER_RESOURCE_ID) VALUES('RESOURCE_EDIT_PAGE_ROOT', 'RES_ATTR_PAGE');
INSERT INTO res_to_res_membership (RESOURCE_ID, MEMBER_RESOURCE_ID) VALUES('RESOURCE_EDIT_PAGE_ROOT', 'EDIT_RESOURCE');

/* new file */
use openiam;

UPDATE RES SET URL='/webconsole/roles.html' WHERE RESOURCE_ID='SECURITY_ROLE';
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('SECURITY_ROLE_MENU_PUBLIC', 'SECURITY_ROLE', 'MENU_IS_PUBLIC', 'true');

DELETE FROM RESOURCE_COMPANY WHERE RESOURCE_ID IN(SELECT MEMBER_RESOURCE_ID FROM res_to_res_membership WHERE RESOURCE_ID='SECURITY_ROLE');
DELETE FROM RESOURCE_GROUP  WHERE RESOURCE_ID IN(SELECT MEMBER_RESOURCE_ID FROM res_to_res_membership WHERE RESOURCE_ID='SECURITY_ROLE');
DELETE FROM RESOURCE_POLICY WHERE RESOURCE_ID IN(SELECT MEMBER_RESOURCE_ID FROM res_to_res_membership WHERE RESOURCE_ID='SECURITY_ROLE');
DELETE FROM RESOURCE_PRIVILEGE WHERE RESOURCE_ID IN(SELECT MEMBER_RESOURCE_ID FROM res_to_res_membership WHERE RESOURCE_ID='SECURITY_ROLE');
DELETE FROM RESOURCE_PROP WHERE RESOURCE_ID IN(SELECT MEMBER_RESOURCE_ID FROM res_to_res_membership WHERE RESOURCE_ID='SECURITY_ROLE');
DELETE FROM RESOURCE_ROLE WHERE RESOURCE_ID IN(SELECT MEMBER_RESOURCE_ID FROM res_to_res_membership WHERE RESOURCE_ID='SECURITY_ROLE');
DELETE FROM RESOURCE_USER WHERE RESOURCE_ID IN(SELECT MEMBER_RESOURCE_ID FROM res_to_res_membership WHERE RESOURCE_ID='SECURITY_ROLE');
DELETE FROM res_to_res_membership WHERE RESOURCE_ID='SECURITY_ROLE';

/* role root menus */
INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION, URL) VALUES('ROLE_ROOT_MENU', 'MENU_ITEM', 'ROLE_ROOT_MENU', 'Role Root Menus','/webconsole/roles.html');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('ROLE_ROOT_MENU_PUB', 'ROLE_ROOT_MENU', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('ROLE_ROOT_MENU_DESC', 'ROLE_ROOT_MENU', 'MENU_DISPLAY_NAME', 'Role Root Menu');


INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION, URL) VALUES('ROLE_SEARCH', 'MENU_ITEM', 'ROLE_SEARCH', 'Role Search','/webconsole/roles.html');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('ROLE_SEARCH_PUB', 'ROLE_SEARCH', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('ROLE_SEARCH_DESC', 'ROLE_SEARCH', 'MENU_DISPLAY_NAME', 'Role Search');

INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION, URL) VALUES('NEW_ROLE', 'MENU_ITEM', 'NEW_ROLE', 'New Role','/webconsole/editRole.html');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('NEW_ROLE_PUB', 'NEW_ROLE', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('NEW_ROLE_DESC', 'NEW_ROLE', 'MENU_DISPLAY_NAME', 'Create New Role');

INSERT INTO res_to_res_membership (RESOURCE_ID, MEMBER_RESOURCE_ID) VALUES('ROLE_ROOT_MENU', 'ROLE_SEARCH');
INSERT INTO res_to_res_membership (RESOURCE_ID, MEMBER_RESOURCE_ID) VALUES('ROLE_ROOT_MENU', 'NEW_ROLE');


/* role edit menus */
INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION) VALUES('ROLE_EDIT_MENU', 'MENU_ITEM', 'ROLE_EDIT_MENU', 'Role Edit Menus');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('ROLE_EDIT_MENU_PUB', 'ROLE_EDIT_MENU', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('ROLE_EDIT_MENU_DESC', 'ROLE_EDIT_MENU', 'MENU_DISPLAY_NAME', 'Role Root Edit Menu');

INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION, URL) VALUES('EDIT_ROLE', 'MENU_ITEM', 'EDIT_ROLE', 'Role Menus','/webconsole/editRole.html');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('EDIT_ROLE_PUB', 'EDIT_ROLE', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('EDIT_ROLE_DESC', 'EDIT_ROLE', 'MENU_DISPLAY_NAME', 'Edit Role');

INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION, URL) VALUES('ROLE_ATTRIBUTES', 'MENU_ITEM', 'ROLE_ATTRIBUTES', 'Role Attributes','/webconsole/roleAttributes.html');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('ROLE_ATTRIBUTES_PUB', 'ROLE_ATTRIBUTES', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('ROLE_ATTRIBUTES_DESC', 'ROLE_ATTRIBUTES', 'MENU_DISPLAY_NAME', 'Role Attributes');

INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION, URL) VALUES('ROLE_ENTITLEMENTS', 'MENU_ITEM', 'ROLE_ENTITLEMENTS', 'Role Entitlements','/webconsole/roleEntitlements.html');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('ROLE_ENTITLEMENTS_PUB', 'ROLE_ENTITLEMENTS', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('ROLE_ENTITLEMENTS_DESC', 'ROLE_ENTITLEMENTS', 'MENU_DISPLAY_NAME', 'Role Entitlements');

INSERT INTO res_to_res_membership (RESOURCE_ID, MEMBER_RESOURCE_ID) VALUES('ROLE_EDIT_MENU', 'EDIT_ROLE');
INSERT INTO res_to_res_membership (RESOURCE_ID, MEMBER_RESOURCE_ID) VALUES('ROLE_EDIT_MENU', 'ROLE_ATTRIBUTES');
INSERT INTO res_to_res_membership (RESOURCE_ID, MEMBER_RESOURCE_ID) VALUES('ROLE_EDIT_MENU', 'ROLE_ENTITLEMENTS');
/* new file */
use openiam;

DELETE FROM GRP_ATTRIBUTES WHERE GRP_ID IN( SELECT GRP_ID FROM GRP WHERE GRP_NAME IS NULL);
DELETE FROM GRP_ROLE WHERE GRP_ID IN( SELECT GRP_ID FROM GRP WHERE GRP_NAME IS NULL);
DELETE FROM grp_to_grp_membership WHERE GROUP_ID IN( SELECT GRP_ID FROM GRP WHERE GRP_NAME IS NULL);
DELETE FROM grp_to_grp_membership WHERE MEMBER_GROUP_ID IN( SELECT GRP_ID FROM GRP WHERE GRP_NAME IS NULL);
DELETE FROM RESOURCE_GROUP WHERE GRP_ID IN( SELECT GRP_ID FROM GRP WHERE GRP_NAME IS NULL);
DELETE FROM USER_GRP WHERE GRP_ID IN( SELECT GRP_ID FROM GRP WHERE GRP_NAME IS NULL);
ALTER TABLE GRP MODIFY COLUMN GRP_NAME VARCHAR(80) NOT NULL;

ALTER TABLE USER_GRP ADD CONSTRAINT USER_GRP_UNIQUE_RECORD UNIQUE (USER_ID, GRP_ID);
/* new file */
use openiam;

ALTER TABLE GRP DROP COLUMN POLICY_ID;
ALTER TABLE GRP DROP COLUMN GROUP_APPROVER_ID;
ALTER TABLE GRP DROP COLUMN PARENT_GRP_ID;
ALTER TABLE GRP DROP COLUMN INHERIT_FROM_PARENT;
ALTER TABLE GRP DROP COLUMN GROUP_CLASS;
/* new file */
use openiam;

UPDATE RES SET URL='/webconsole/groups.html' WHERE RESOURCE_ID='SECURITY_GROUP';
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('SECURITY_GROUP_PUB', 'SECURITY_GROUP', 'MENU_IS_PUBLIC', 'true');

/* group root menus */
INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION, URL) VALUES('GROUP_ROOT_MENU', 'MENU_ITEM', 'GROUP_ROOT_MENU', 'Group Menus','/webconsole/groups.html');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('GROUP_ROOT_MENU_PUB', 'GROUP_ROOT_MENU', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('GROUP_ROOT_MENU_DESC', 'GROUP_ROOT_MENU', 'MENU_DISPLAY_NAME', 'Group Root Menu');


INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION, URL) VALUES('GROUP_SEARCH', 'MENU_ITEM', 'GROUP_SEARCH', 'Group Search','/webconsole/groups.html');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('GROUP_SEARCH_PUB', 'GROUP_SEARCH', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('GROUP_SEARCH_DESC', 'GROUP_SEARCH', 'MENU_DISPLAY_NAME', 'Group Search');

INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION, URL) VALUES('NEW_GROUP', 'MENU_ITEM', 'NEW_GROUP', 'Create New Group','/webconsole/editGroup.html');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('NEW_GROUP_PUB', 'NEW_GROUP', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('NEW_GROUP_DESC', 'NEW_GROUP', 'MENU_DISPLAY_NAME', 'Create New Group');

INSERT INTO res_to_res_membership (RESOURCE_ID, MEMBER_RESOURCE_ID) VALUES('GROUP_ROOT_MENU', 'GROUP_SEARCH');
INSERT INTO res_to_res_membership (RESOURCE_ID, MEMBER_RESOURCE_ID) VALUES('GROUP_ROOT_MENU', 'NEW_GROUP');


/* group edit menus */
INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION) VALUES('GROUP_EDIT_MENU', 'MENU_ITEM', 'GROUP_EDIT_MENU', 'Group Edit Menus');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('GROUP_EDIT_MENU_PUB', 'GROUP_EDIT_MENU', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('GROUP_EDIT_MENU_DESC', 'GROUP_EDIT_MENU', 'MENU_DISPLAY_NAME', 'Group Root Edit Menu');

INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION, URL) VALUES('EDIT_GROUP', 'MENU_ITEM', 'EDIT_GROUP', 'Edit Group','/webconsole/editGroup.html');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('EDIT_GROUP_PUB', 'EDIT_GROUP', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('EDIT_GROUP_DESC', 'EDIT_GROUP', 'MENU_DISPLAY_NAME', 'Edit Group');

INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION, URL) VALUES('GROUP_ATTRIBUTES', 'MENU_ITEM', 'GROUP_ATTRIBUTES', 'Group Attributes','/webconsole/groupAttributes.html');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('GROUP_ATTRIBUTES_PUB', 'GROUP_ATTRIBUTES', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('GROUP_ATTRIBUTES_DESC', 'GROUP_ATTRIBUTES', 'MENU_DISPLAY_NAME', 'Group Attributes');

INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION, URL) VALUES('GROUP_ENTITLEMENTS', 'MENU_ITEM', 'GROUP_ENTITLEMENTS', 'Group Entitlements','/webconsole/groupEntitlements.html');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('GROUP_ENTITLEMENTS_PUB', 'GROUP_ENTITLEMENTS', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('GROUP_ENTITLEMENTS_DESC', 'GROUP_ENTITLEMENTS', 'MENU_DISPLAY_NAME', 'Group Entitlements');

INSERT INTO res_to_res_membership (RESOURCE_ID, MEMBER_RESOURCE_ID) VALUES('GROUP_EDIT_MENU', 'EDIT_GROUP');
INSERT INTO res_to_res_membership (RESOURCE_ID, MEMBER_RESOURCE_ID) VALUES('GROUP_EDIT_MENU', 'GROUP_ATTRIBUTES');
INSERT INTO res_to_res_membership (RESOURCE_ID, MEMBER_RESOURCE_ID) VALUES('GROUP_EDIT_MENU', 'GROUP_ENTITLEMENTS');
/* new file */
use openiam;

INSERT INTO METADATA_TYPE(TYPE_ID, DESCRIPTION, SYNC_MANAGED_SYS) VALUES('AD_GROUP_TYPE','AD GROUP TYPE', 0);
INSERT INTO METADATA_TYPE(TYPE_ID, DESCRIPTION, SYNC_MANAGED_SYS) VALUES('LDAP_GROUP_TYPE','LDAP GROUP TYPE', 0);
INSERT INTO METADATA_TYPE(TYPE_ID, DESCRIPTION, SYNC_MANAGED_SYS) VALUES('DEFAULT_GROUP','DEFAULT GROUP TYPE', 0);

INSERT INTO CATEGORY (category_id, parent_id, category_name, show_list) VALUES('GROUP_TYPE', 'ROOT', 'Group Type',0);

INSERT INTO CATEGORY_TYPE (category_id, type_id) VALUES('GROUP_TYPE','AD_GROUP_TYPE');
INSERT INTO CATEGORY_TYPE (category_id, type_id) VALUES('GROUP_TYPE','LDAP_GROUP_TYPE');
INSERT INTO CATEGORY_TYPE (category_id, type_id) VALUES('GROUP_TYPE','DEFAULT_GROUP');
/* new file */
ALTER TABLE METADATA_TYPE MODIFY TYPE_ID varchar(32) not null;

ALTER TABLE CATEGORY_LANGUAGE MODIFY CATEGORY_ID varchar(32) not null;

ALTER TABLE CATEGORY_TYPE 
	MODIFY 
		CATEGORY_ID varchar(32) not null, 
	MODIFY	
		TYPE_ID varchar(32) not null;
ALTER TABLE CATEGORY 
	MODIFY 
		CATEGORY_ID varchar(32) not null, 
	MODIFY	
		PARENT_ID varchar(32) null;
ALTER TABLE METADATA_ELEMENT 
	MODIFY 
		METADATA_ID varchar(32) not null, 
	MODIFY	
		TYPE_ID varchar(32) not null;

/* new file */
use openiam;

DELIMITER $$

CREATE TRIGGER ON_USER_INSERT 
BEFORE 
INSERT ON USERS 
	FOR EACH ROW
	BEGIN
		SET NEW.CREATE_DATE = NOW();
		SET NEW.LAST_UPDATE = NOW();
	END$$
	
CREATE TRIGGER ON_USER_UPDATE
BEFORE 
UPDATE ON USERS 
	FOR EACH ROW
	BEGIN
		SET NEW.LAST_UPDATE = NOW();
	END$$
	
DELIMITER ;
/* new file */
use openiam;
CREATE TABLE `IDM_AUDIT_LOG_CUSTOM` (
  `CUSTOM_LOG_ID` bigint NOT NULL AUTO_INCREMENT,
  `LOG_ID` varchar(32) NOT NULL,
  `NAME` varchar(255) DEFAULT NULL,
  `VALUE` varchar(255) DEFAULT NULL,
  `TYPE` INTEGER NOT NULL,
  `DISPLAY_ORDER` INTEGER NOT NULL,
  PRIMARY KEY (`CUSTOM_LOG_ID`),
  KEY `FK_LOG_ID` (`LOG_ID`),
 CONSTRAINT `FK_LOG_ID` FOREIGN KEY (`LOG_ID`) 
 REFERENCES `IDM_AUDIT_LOG` (`LOG_ID`)
) ENGINE=InnoDB;


INSERT INTO IDM_AUDIT_LOG_CUSTOM ( LOG_ID,NAME,VALUE,TYPE,DISPLAY_ORDER) 
SELECT  ial.LOG_ID, ial.CUSTOM_ATTRNAME1, ial.CUSTOM_ATTRVALUE1, 0, 1 
FROM IDM_AUDIT_LOG as ial WHERE ial.CUSTOM_ATTRNAME1 IS NOT NULL AND ial.CUSTOM_ATTRVALUE1 IS NOT NULL;

INSERT INTO IDM_AUDIT_LOG_CUSTOM ( LOG_ID,NAME,VALUE,TYPE,DISPLAY_ORDER) 
SELECT  ial.LOG_ID, ial.CUSTOM_ATTRNAME2, ial.CUSTOM_ATTRVALUE2, 0, 2 
FROM IDM_AUDIT_LOG as ial WHERE ial.CUSTOM_ATTRNAME2 IS NOT NULL AND ial.CUSTOM_ATTRVALUE2 IS NOT NULL;

INSERT INTO IDM_AUDIT_LOG_CUSTOM ( LOG_ID,NAME,VALUE,TYPE,DISPLAY_ORDER) 
SELECT  ial.LOG_ID, ial.CUSTOM_ATTRNAME3, ial.CUSTOM_ATTRVALUE3, 0, 3 
FROM IDM_AUDIT_LOG as ial WHERE ial.CUSTOM_ATTRNAME3 IS NOT NULL AND ial.CUSTOM_ATTRVALUE3 IS NOT NULL;

INSERT INTO IDM_AUDIT_LOG_CUSTOM ( LOG_ID,NAME,VALUE,TYPE,DISPLAY_ORDER) 
SELECT  ial.LOG_ID, ial.CUSTOM_ATTRNAME4, ial.CUSTOM_ATTRVALUE4, 0, 4 
FROM IDM_AUDIT_LOG as ial WHERE ial.CUSTOM_ATTRNAME4 IS NOT NULL AND ial.CUSTOM_ATTRVALUE4 IS NOT NULL;

INSERT INTO IDM_AUDIT_LOG_CUSTOM ( LOG_ID,NAME,VALUE,TYPE,DISPLAY_ORDER) 
SELECT  ial.LOG_ID, ial.CUSTOM_ATTRNAME5, ial.CUSTOM_ATTRVALUE5, 0, 5 
FROM IDM_AUDIT_LOG as ial WHERE ial.CUSTOM_ATTRNAME5 IS NOT NULL AND ial.CUSTOM_ATTRVALUE5 IS NOT NULL;

INSERT INTO IDM_AUDIT_LOG_CUSTOM ( LOG_ID,NAME,VALUE,TYPE,DISPLAY_ORDER) 
SELECT  ial.LOG_ID, ial.CUSTOM_ATTRNAME6, ial.CUSTOM_ATTRVALUE6, 0, 6 
FROM IDM_AUDIT_LOG as ial WHERE ial.CUSTOM_ATTRNAME6 IS NOT NULL AND ial.CUSTOM_ATTRVALUE6 IS NOT NULL;

INSERT INTO IDM_AUDIT_LOG_CUSTOM ( LOG_ID,NAME,VALUE,TYPE,DISPLAY_ORDER) 
SELECT  ial.LOG_ID, ial.CUSTOM_ATTRNAME7, ial.CUSTOM_ATTRVALUE7, 0, 7 
FROM IDM_AUDIT_LOG as ial WHERE ial.CUSTOM_ATTRNAME7 IS NOT NULL AND ial.CUSTOM_ATTRVALUE7 IS NOT NULL;

INSERT INTO IDM_AUDIT_LOG_CUSTOM ( LOG_ID,NAME,VALUE,TYPE,DISPLAY_ORDER) 
SELECT  ial.LOG_ID, ial.CUSTOM_ATTRNAME8, ial.CUSTOM_ATTRVALUE8, 0, 8 
FROM IDM_AUDIT_LOG as ial WHERE ial.CUSTOM_ATTRNAME8 IS NOT NULL AND ial.CUSTOM_ATTRVALUE8 IS NOT NULL;

INSERT INTO IDM_AUDIT_LOG_CUSTOM ( LOG_ID,NAME,VALUE,TYPE,DISPLAY_ORDER) 
SELECT  ial.LOG_ID, ial.CUSTOM_ATTRNAME9, ial.CUSTOM_ATTRVALUE9, 0, 9 
FROM IDM_AUDIT_LOG as ial WHERE ial.CUSTOM_ATTRNAME9 IS NOT NULL AND ial.CUSTOM_ATTRVALUE9 IS NOT NULL;

INSERT INTO IDM_AUDIT_LOG_CUSTOM ( LOG_ID,NAME,VALUE,TYPE,DISPLAY_ORDER) 
SELECT  ial.LOG_ID, ial.CUSTOM_ATTRNAME10, ial.CUSTOM_ATTRVALUE10, 0, 10
FROM IDM_AUDIT_LOG as ial WHERE ial.CUSTOM_ATTRNAME10 IS NOT NULL AND ial.CUSTOM_ATTRVALUE10 IS NOT NULL;

INSERT INTO IDM_AUDIT_LOG_CUSTOM ( LOG_ID,NAME,VALUE,TYPE,DISPLAY_ORDER) 
SELECT  ial.LOG_ID, ial.CUSTOM_PARAMNAME1, ial.CUSTOM_PARAMVALUE1, 1, 1 
FROM IDM_AUDIT_LOG as ial WHERE ial.CUSTOM_PARAMNAME1 IS NOT NULL AND ial.CUSTOM_PARAMVALUE1 IS NOT NULL;

INSERT INTO IDM_AUDIT_LOG_CUSTOM ( LOG_ID,NAME,VALUE,TYPE,DISPLAY_ORDER) 
SELECT  ial.LOG_ID, ial.CUSTOM_PARAMNAME2, ial.CUSTOM_PARAMVALUE2, 1, 2 
FROM IDM_AUDIT_LOG as ial WHERE ial.CUSTOM_PARAMNAME2 IS NOT NULL AND ial.CUSTOM_PARAMVALUE2 IS NOT NULL;

INSERT INTO IDM_AUDIT_LOG_CUSTOM ( LOG_ID,NAME,VALUE,TYPE,DISPLAY_ORDER) 
SELECT  ial.LOG_ID, ial.CUSTOM_PARAMNAME3, ial.CUSTOM_PARAMVALUE3, 1, 3 
FROM IDM_AUDIT_LOG as ial WHERE ial.CUSTOM_PARAMNAME3 IS NOT NULL AND ial.CUSTOM_PARAMVALUE3 IS NOT NULL;

INSERT INTO IDM_AUDIT_LOG_CUSTOM ( LOG_ID,NAME,VALUE,TYPE,DISPLAY_ORDER) 
SELECT  ial.LOG_ID, ial.CUSTOM_PARAMNAME4, ial.CUSTOM_PARAMVALUE4, 1, 4 
FROM IDM_AUDIT_LOG as ial WHERE ial.CUSTOM_PARAMNAME4 IS NOT NULL AND ial.CUSTOM_PARAMVALUE4 IS NOT NULL;

INSERT INTO IDM_AUDIT_LOG_CUSTOM ( LOG_ID,NAME,VALUE,TYPE,DISPLAY_ORDER) 
SELECT  ial.LOG_ID, ial.CUSTOM_PARAMNAME5, ial.CUSTOM_PARAMVALUE5, 1, 5 
FROM IDM_AUDIT_LOG as ial WHERE ial.CUSTOM_PARAMNAME5 IS NOT NULL AND ial.CUSTOM_PARAMVALUE5 IS NOT NULL;

INSERT INTO IDM_AUDIT_LOG_CUSTOM ( LOG_ID,NAME,VALUE,TYPE,DISPLAY_ORDER) 
SELECT  ial.LOG_ID, ial.CUSTOM_PARAMNAME6, ial.CUSTOM_PARAMVALUE6, 1, 6 
FROM IDM_AUDIT_LOG as ial WHERE ial.CUSTOM_PARAMNAME6 IS NOT NULL AND ial.CUSTOM_PARAMVALUE6 IS NOT NULL;

INSERT INTO IDM_AUDIT_LOG_CUSTOM ( LOG_ID,NAME,VALUE,TYPE,DISPLAY_ORDER) 
SELECT  ial.LOG_ID, ial.CUSTOM_PARAMNAME7, ial.CUSTOM_PARAMVALUE7, 1, 7 
FROM IDM_AUDIT_LOG as ial WHERE ial.CUSTOM_PARAMNAME7 IS NOT NULL AND ial.CUSTOM_PARAMVALUE7 IS NOT NULL;

INSERT INTO IDM_AUDIT_LOG_CUSTOM ( LOG_ID,NAME,VALUE,TYPE,DISPLAY_ORDER) 
SELECT  ial.LOG_ID, ial.CUSTOM_PARAMNAME8, ial.CUSTOM_PARAMVALUE8, 1, 8 
FROM IDM_AUDIT_LOG as ial WHERE ial.CUSTOM_PARAMNAME8 IS NOT NULL AND ial.CUSTOM_PARAMVALUE8 IS NOT NULL;

INSERT INTO IDM_AUDIT_LOG_CUSTOM ( LOG_ID,NAME,VALUE,TYPE,DISPLAY_ORDER) 
SELECT  ial.LOG_ID, ial.CUSTOM_PARAMNAME9, ial.CUSTOM_PARAMVALUE9, 1, 9 
FROM IDM_AUDIT_LOG as ial WHERE ial.CUSTOM_PARAMNAME9 IS NOT NULL AND ial.CUSTOM_PARAMVALUE9 IS NOT NULL;

INSERT INTO IDM_AUDIT_LOG_CUSTOM ( LOG_ID,NAME,VALUE,TYPE,DISPLAY_ORDER) 
SELECT  ial.LOG_ID, ial.CUSTOM_PARAMNAME10, ial.CUSTOM_PARAMVALUE10, 1, 10
FROM IDM_AUDIT_LOG as ial WHERE ial.CUSTOM_PARAMNAME10 IS NOT NULL AND ial.CUSTOM_PARAMVALUE10 IS NOT NULL; 




ALTER TABLE IDM_AUDIT_LOG
DROP COLUMN `CUSTOM_PARAMVALUE10` , DROP COLUMN `CUSTOM_PARAMVALUE9` , 
DROP COLUMN `CUSTOM_PARAMVALUE8` , DROP COLUMN `CUSTOM_PARAMVALUE7` , 
DROP COLUMN `CUSTOM_PARAMVALUE6` , DROP COLUMN `CUSTOM_PARAMVALUE5` , 
DROP COLUMN `CUSTOM_PARAMVALUE4` , DROP COLUMN `CUSTOM_PARAMVALUE3` , 
DROP COLUMN `CUSTOM_PARAMVALUE2` , DROP COLUMN `CUSTOM_PARAMVALUE1` , 
DROP COLUMN `CUSTOM_PARAMNAME10` , DROP COLUMN `CUSTOM_PARAMNAME9` , 
DROP COLUMN `CUSTOM_PARAMNAME8` , DROP COLUMN `CUSTOM_PARAMNAME7` , 
DROP COLUMN `CUSTOM_PARAMNAME6` , DROP COLUMN `CUSTOM_PARAMNAME5` , 
DROP COLUMN `CUSTOM_PARAMNAME4` , DROP COLUMN `CUSTOM_PARAMNAME3` , 
DROP COLUMN `CUSTOM_PARAMNAME2` , DROP COLUMN `CUSTOM_PARAMNAME1` ,
DROP COLUMN `CUSTOM_ATTRVALUE10` , DROP COLUMN `CUSTOM_ATTRVALUE9` , 
DROP COLUMN `CUSTOM_ATTRVALUE8` , DROP COLUMN `CUSTOM_ATTRVALUE7` , 
DROP COLUMN `CUSTOM_ATTRVALUE6` , DROP COLUMN `CUSTOM_ATTRVALUE5` , 
DROP COLUMN `CUSTOM_ATTRVALUE4` , DROP COLUMN `CUSTOM_ATTRVALUE3` , 
DROP COLUMN `CUSTOM_ATTRVALUE2` , DROP COLUMN `CUSTOM_ATTRVALUE1` , 
DROP COLUMN `CUSTOM_ATTRNAME10` , DROP COLUMN `CUSTOM_ATTRNAME9` , 
DROP COLUMN `CUSTOM_ATTRNAME8` , DROP COLUMN `CUSTOM_ATTRNAME7` , 
DROP COLUMN `CUSTOM_ATTRNAME6` , DROP COLUMN `CUSTOM_ATTRNAME5` , 
DROP COLUMN `CUSTOM_ATTRNAME4` , DROP COLUMN `CUSTOM_ATTRNAME3` , 
DROP COLUMN `CUSTOM_ATTRNAME2` , DROP COLUMN `CUSTOM_ATTRNAME1` , 
DROP COLUMN `ACTION_END_DATETIME`, 
DROP COLUMN `ORIG_OBJECT_STATE`,
DROP COLUMN `NEW_OBJECT_STATE`;

ALTER TABLE IDM_AUDIT_LOG_CUSTOM
MODIFY CUSTOM_LOG_ID varchar(32) NOT NULL;

/* new file */
use openiam;

DELETE FROM COMPANY_ATTRIBUTE WHERE COMPANY_ID IS NULL;

ALTER TABLE COMPANY_ATTRIBUTE MODIFY COMPANY_ID VARCHAR(32) NOT NULL;


/* new file */
use openiam;


CREATE TABLE COMPANY_TO_COMPANY_MEMBERSHIP (
	COMPANY_ID varchar(32) NOT NULL,
	MEMBER_COMPANY_ID varchar(32) NOT NULL,
	CREATE_DATE TIMESTAMP NULL,
	UPDATE_DATE TIMESTAMP NULL,
	CREATED_BY varchar(32) NULL,
	UPDATED_BY varchar(32) NULL,
	UNIQUE(COMPANY_ID, MEMBER_COMPANY_ID),
	FOREIGN KEY (COMPANY_ID) REFERENCES COMPANY (COMPANY_ID ),
	FOREIGN KEY (MEMBER_COMPANY_ID) REFERENCES COMPANY (COMPANY_ID )
)  Engine=InnoDB;

DELIMITER $$

CREATE TRIGGER ON_COMPANY_XREF_INSERT
BEFORE
INSERT ON COMPANY_TO_COMPANY_MEMBERSHIP
	FOR EACH ROW
	BEGIN
		SET NEW.CREATE_DATE = NOW();
		SET NEW.UPDATE_DATE = NOW();
	END$$

COMMIT;



DROP PROCEDURE IF EXISTS MIGRATE_COMPANY_MEMBERSHIP$$

CREATE PROCEDURE MIGRATE_COMPANY_MEMBERSHIP()
	BEGIN
		DECLARE done INT DEFAULT FALSE;
		DECLARE c_id, p_id VARCHAR(32);		
		DECLARE cur1 CURSOR FOR (SELECT COMPANY_ID, PARENT_ID FROM COMPANY WHERE PARENT_ID IS NOT NULL);
		DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
		OPEN cur1;
		
		REPEAT 
			FETCH cur1 INTO c_id, p_id;
			IF (c_id IS NOT NULL AND p_id IS NOT NULL) THEN
				IF ((SELECT COMPANY_ID FROM COMPANY_TO_COMPANY_MEMBERSHIP WHERE COMPANY_ID=p_id AND MEMBER_COMPANY_ID=c_id) IS NULL) THEN
					IF((SELECT COMPANY_ID FROM COMPANY WHERE COMPANY_ID=c_id) IS NOT NULL) THEN
						IF((SELECT COMPANY_ID FROM COMPANY WHERE COMPANY_ID=p_id) IS NOT NULL) THEN
							INSERT INTO COMPANY_TO_COMPANY_MEMBERSHIP (COMPANY_ID, MEMBER_COMPANY_ID) VALUES(p_id, c_id);
						END IF;
					END IF;
				END IF;
			END IF;
		UNTIL done END REPEAT; 
				
		CLOSE cur1;
	END$$
DELIMITER ;

call MIGRATE_COMPANY_MEMBERSHIP();

DROP PROCEDURE MIGRATE_COMPANY_MEMBERSHIP;

COMMIT;
/* new file */
use openiam;

DROP TABLE RESOURCE_COMPANY;
/* new file */
use openiam;

ALTER TABLE LOGIN_ATTRIBUTE DROP FOREIGN KEY FK_LOGIN_LOGIN_ATTRIBUTE;

ALTER TABLE LOGIN_ATTRIBUTE DROP INDEX FK_LOGIN_LOGIN_ATTRIBUTE;

ALTER TABLE LOGIN DROP FOREIGN KEY FK_LOGIN_USERS;

ALTER TABLE LOGIN DROP FOREIGN KEY FK_LOGIN_SERVICE;

ALTER TABLE LOGIN DROP PRIMARY KEY;

ALTER TABLE LOGIN ADD COLUMN LOGIN_ID VARCHAR(32);

ALTER TABLE LOGIN_ATTRIBUTE ADD COLUMN LOGIN_ID VARCHAR(32);

ALTER TABLE PWD_HISTORY ADD COLUMN LOGIN_ID VARCHAR(32);

DELIMITER $$

DROP PROCEDURE IF EXISTS GENERATE_SIMPLE_LOGIN_ID$$

CREATE PROCEDURE GENERATE_SIMPLE_LOGIN_ID()
	BEGIN
		DECLARE done INT DEFAULT FALSE;
		DECLARE srvId VARCHAR(20);
		DECLARE lgn VARCHAR(320);
		DECLARE mgSysId VARCHAR(32);
		DECLARE lgnId VARCHAR(32);
		DECLARE newId INT DEFAULT 1;
		DECLARE cur1 CURSOR FOR (SELECT LOGIN, MANAGED_SYS_ID, SERVICE_ID, LOGIN_ID FROM LOGIN);
		DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
		OPEN cur1;
		
		REPEAT 
			FETCH cur1 INTO lgn, mgSysId, srvId, lgnId;
			IF (lgnId IS NULL) THEN
				UPDATE LOGIN SET LOGIN_ID=newId WHERE SERVICE_ID=srvId AND MANAGED_SYS_ID=mgSysId AND LOGIN=lgn;
				UPDATE LOGIN_ATTRIBUTE SET LOGIN_ID=newId WHERE SERVICE_ID=srvId AND MANAGED_SYS_ID=mgSysId AND LOGIN=lgn;
				UPDATE PWD_HISTORY SET LOGIN_ID=newId WHERE SERVICE_ID=srvId AND MANAGED_SYS_ID=mgSysId AND LOGIN=lgn;
				SET newId = newId + 1;
			END IF;
		UNTIL done END REPEAT; 
				
		
		CLOSE cur1;
	END$$
DELIMITER ;

call GENERATE_SIMPLE_LOGIN_ID();

DROP PROCEDURE GENERATE_SIMPLE_LOGIN_ID;

ALTER TABLE PWD_HISTORY DROP COLUMN LOGIN;

ALTER TABLE PWD_HISTORY DROP COLUMN SERVICE_ID;

ALTER TABLE PWD_HISTORY DROP COLUMN MANAGED_SYS_ID;

ALTER TABLE LOGIN_ATTRIBUTE DROP COLUMN LOGIN;

ALTER TABLE LOGIN_ATTRIBUTE DROP COLUMN SERVICE_ID;

ALTER TABLE LOGIN_ATTRIBUTE DROP COLUMN MANAGED_SYS_ID;

ALTER TABLE LOGIN ADD PRIMARY KEY (LOGIN_ID);

ALTER TABLE PWD_HISTORY ADD CONSTRAINT LOGIN_ID_PWD_HIST_FK FOREIGN KEY (LOGIN_ID) REFERENCES LOGIN (LOGIN_ID);

ALTER TABLE LOGIN_ATTRIBUTE ADD CONSTRAINT LOGIN_ID_LOGIN_ATTR_FK FOREIGN KEY (LOGIN_ID) REFERENCES LOGIN (LOGIN_ID);

ALTER TABLE LOGIN ADD CONSTRAINT FK_LOGIN_USERS FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID);

ALTER TABLE LOGIN ADD CONSTRAINT FK_LOGIN_SERVICE FOREIGN KEY (SERVICE_ID) REFERENCES SECURITY_DOMAIN(DOMAIN_ID);

ALTER TABLE LOGIN_ATTRIBUTE MODIFY COLUMN LOGIN_ID VARCHAR(32) NOT NULL;

ALTER TABLE PWD_HISTORY MODIFY COLUMN LOGIN_ID VARCHAR(32) NOT NULL;

ALTER TABLE LOGIN ADD CONSTRAINT UNIQUE_LOGIN UNIQUE (LOGIN, MANAGED_SYS_ID, SERVICE_ID);
/* new file */
use openiam;

ALTER TABLE LOGIN ADD COLUMN LAST_UPDATE TIMESTAMP NULL;

DELIMITER $$

CREATE TRIGGER ON_LOGIN_INSERT 
BEFORE 
INSERT ON LOGIN 
	FOR EACH ROW
	BEGIN
		SET NEW.CREATE_DATE = NOW();
		SET NEW.LAST_UPDATE = NOW();
	END$$
	
CREATE TRIGGER ON_LOGIN_UPDATE
BEFORE 
UPDATE ON LOGIN 
	FOR EACH ROW
	BEGIN
		SET NEW.LAST_UPDATE = NOW();
	END$$
	
DELIMITER ;
/* new file */
use openiam;

DROP TABLE PERMISSIONS;

DROP TABLE MENU;
/* new file */
use openiam;

/*remove old user menus*/

DELETE FROM  RESOURCE_PROP WHERE RESOURCE_ID in ('USER_MENU_ROOT', 'USER_EDIT_MENU_ROOT','ADDUSER','NEW_USER','USERSUMMARY','USERROLE',
                                                 'USERPSWDRESET','USERORG','USERORG','USERIDENTITY','USERHISTORY','USERGROUP','USERATTR','QUERYUSER',
                                                 'USER','USER_ROOT_MENU', 'NEW_USER','USER_EDIT_MENU','USER_SEARCH','USER_EDIT_INFO',
                                                 'USER_EDIT_CONTACT_INFO','USER_ATTRIBUTES','USER_IDENTITY','USER_ENTITLEMENTS','USER_HISTORY','USER_DELEGATION');

DELETE FROM RESOURCE_ROLE where RESOURCE_ID in ('USER_MENU_ROOT', 'USER_EDIT_MENU_ROOT','ADDUSER','NEW_USER','USERSUMMARY','USERROLE',
                                                'USERPSWDRESET','USERORG','USERORG','USERIDENTITY','USERHISTORY','USERGROUP','USERATTR','QUERYUSER',
                                                'NEW_USER','USER_SEARCH','USER_EDIT_INFO',
                                                'USER_EDIT_CONTACT_INFO','USER_ATTRIBUTES','USER_IDENTITY','USER_ENTITLEMENTS','USER_HISTORY','USER_DELEGATION');

DELETE FROM  res_to_res_membership WHERE RESOURCE_ID in ('USER_MENU_ROOT', 'USER_EDIT_MENU_ROOT', 'USER_ROOT_MENU','USER_EDIT_MENU');

DELETE FROM  res_to_res_membership WHERE MEMBER_RESOURCE_ID in ('USER_MENU_ROOT', 'USER_EDIT_MENU_ROOT', 'USER_ROOT_MENU','USER_EDIT_MENU');

DELETE FROM  res_to_res_membership WHERE RESOURCE_ID in ('USER_MENU_ROOT', 'USER_EDIT_MENU_ROOT','ADDUSER','NEW_USER','USERSUMMARY','USERROLE',
	'USERPSWDRESET','USERORG','USERORG','USERIDENTITY','USERHISTORY','USERGROUP','USERATTR','QUERYUSER',
	'NEW_USER','USER_SEARCH','USER_EDIT_INFO', 'USER_ROOT_MENU','USER_EDIT_MENU',
	'USER_EDIT_CONTACT_INFO','USER_ATTRIBUTES','USER_IDENTITY','USER_ENTITLEMENTS','USER_HISTORY','USER_DELEGATION');

DELETE FROM  res_to_res_membership WHERE MEMBER_RESOURCE_ID in ('USER_MENU_ROOT', 'USER_EDIT_MENU_ROOT','ADDUSER','NEW_USER','USERSUMMARY','USERROLE',
	'USERPSWDRESET','USERORG','USERORG','USERIDENTITY','USERHISTORY','USERGROUP','USERATTR','QUERYUSER',
	'NEW_USER','USER_SEARCH','USER_EDIT_INFO', 'USER_ROOT_MENU','USER_EDIT_MENU',
	'USER_EDIT_CONTACT_INFO','USER_ATTRIBUTES','USER_IDENTITY','USER_ENTITLEMENTS','USER_HISTORY','USER_DELEGATION');

DELETE FROM  RES WHERE RESOURCE_ID in ('USER_MENU_ROOT', 'USER_EDIT_MENU_ROOT','ADDUSER','NEW_USER','USERSUMMARY','USERROLE',
                                       'USERPSWDRESET','USERORG','USERORG','USERIDENTITY','USERHISTORY','USERGROUP','USERATTR','QUERYUSER',
                                       'NEW_USER','USER_SEARCH','USER_EDIT_INFO', 'USER_ROOT_MENU','USER_EDIT_MENU',
                                       'USER_EDIT_CONTACT_INFO','USER_ATTRIBUTES','USER_IDENTITY','USER_ENTITLEMENTS','USER_HISTORY','USER_DELEGATION');


/*user root menus*/
UPDATE RES SET URL='/webconsole/users.html' WHERE RESOURCE_ID='USER';

INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('USER_MENU_PUB', 'USER', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('USER_MENU_DESC', 'USER', 'MENU_DISPLAY_NAME', 'User');

INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION) VALUES('USER_ROOT_MENU', 'MENU_ITEM', 'USER_ROOT_MENU', 'Root for User Context Menu');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('USER_ROOT_MENU_PUB', 'USER_ROOT_MENU', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('USER_ROOT_MENU_DESC', 'USER_ROOT_MENU', 'MENU_DISPLAY_NAME', 'User Root Menu');

INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION, URL) VALUES('NEW_USER', 'MENU_ITEM', 'NEW_USER', 'Create New User','/webconsole/editUser.html');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('NEW_USER_PUB', 'NEW_USER', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('NEW_USER_DESC', 'NEW_USER', 'MENU_DISPLAY_NAME', 'Create New User');

INSERT INTO res_to_res_membership (RESOURCE_ID, MEMBER_RESOURCE_ID) VALUES('USER_ROOT_MENU', 'NEW_USER');

/*user edit menu*/
INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION) VALUES('USER_EDIT_MENU', 'MENU_ITEM', 'USER_EDIT_MENU', 'User Edit Menus');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('USER_EDIT_MENU_PUB', 'USER_EDIT_MENU', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('USER_EDIT_MENU_DESC', 'USER_EDIT_MENU', 'MENU_DISPLAY_NAME', 'User Root Edit Menu');

INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION, URL, DISPLAY_ORDER) VALUES('USER_SEARCH', 'MENU_ITEM', 'USER_SEARCH', 'User Search','/webconsole/users.html',1);
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('USER_SEARCH_PUB', 'USER_SEARCH', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('USER_SEARCH_DESC', 'USER_SEARCH', 'MENU_DISPLAY_NAME', 'User Search');

INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION, URL, DISPLAY_ORDER) VALUES('USER_EDIT_INFO', 'MENU_ITEM', 'USER_EDIT_INFO', 'Edit User Primary Info','/webconsole/editUser.html',2);
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('USER_EDIT_INFO_PUB', 'USER_EDIT_INFO', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('USER_EDIT_INFO_DESC', 'USER_EDIT_INFO', 'MENU_DISPLAY_NAME', 'User Info');

INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION, URL, DISPLAY_ORDER) VALUES('USER_EDIT_CONTACT_INFO', 'MENU_ITEM', 'USER_EDIT_CONTACT_INFO', 'Edit User Contact Info','/webconsole/editUserContact.html',3);
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('USER_EDIT_CONTACT_INFO_PUB', 'USER_EDIT_CONTACT_INFO', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('USER_EDIT_CONTACT_INFO_DESC', 'USER_EDIT_CONTACT_INFO', 'MENU_DISPLAY_NAME', 'Contact Info');

INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION, URL, DISPLAY_ORDER) VALUES('USER_ATTRIBUTES', 'MENU_ITEM', 'USER_ATTRIBUTES', 'Edit User Attributes','/webconsole/userAttributes.html',4);
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('USER_ATTRIBUTES_PUB', 'USER_ATTRIBUTES', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('USER_ATTRIBUTES_DESC', 'USER_ATTRIBUTES', 'MENU_DISPLAY_NAME', 'User Attributes');

INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION, URL, DISPLAY_ORDER) VALUES('USER_IDENTITY', 'MENU_ITEM', 'USER_IDENTITY', 'Edit User Identity Info','/webconsole/editUserIdentity.html',6);
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('USER_IDENTITY_PUB', 'USER_IDENTITY', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('USER_IDENTITY_DESC', 'USER_IDENTITY', 'MENU_DISPLAY_NAME', 'User Identities');

INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION, URL, DISPLAY_ORDER) VALUES('USER_ENTITLEMENTS', 'MENU_ITEM', 'USER_ENTITLEMENTS', 'User Entitlements','/webconsole/userEntitlements.html',7);
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('USER_ENTITLEMENTS_PUB', 'USER_ENTITLEMENTS', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('USER_ENTITLEMENTS_DESC', 'USER_ENTITLEMENTS', 'MENU_DISPLAY_NAME', 'User Entitlements');

INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION, URL, DISPLAY_ORDER) VALUES('USER_HISTORY', 'MENU_ITEM', 'USER_HISTORY', 'User History','/webconsole/userHistory.html',8);
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('USER_HISTORY_PUB', 'USER_HISTORY', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('USER_HISTORY_DESC', 'USER_HISTORY', 'MENU_DISPLAY_NAME', 'User History');

INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION, URL, DISPLAY_ORDER) VALUES('USER_DELEGATION', 'MENU_ITEM', 'USER_DELEGATION', 'User Delegation Filter','/webconsole/userDelegation.html',9);
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('USER_DELEGATION_PUB', 'USER_DELEGATION', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('USER_DELEGATION_DESC', 'USER_DELEGATION', 'MENU_DISPLAY_NAME', 'User Delegation Filter');

INSERT INTO res_to_res_membership (RESOURCE_ID, MEMBER_RESOURCE_ID) VALUES('USER_EDIT_MENU', 'USER_SEARCH');
INSERT INTO res_to_res_membership (RESOURCE_ID, MEMBER_RESOURCE_ID) VALUES('USER_EDIT_MENU', 'USER_EDIT_INFO');
INSERT INTO res_to_res_membership (RESOURCE_ID, MEMBER_RESOURCE_ID) VALUES('USER_EDIT_MENU', 'USER_EDIT_CONTACT_INFO');
INSERT INTO res_to_res_membership (RESOURCE_ID, MEMBER_RESOURCE_ID) VALUES('USER_EDIT_MENU', 'USER_IDENTITY');
INSERT INTO res_to_res_membership (RESOURCE_ID, MEMBER_RESOURCE_ID) VALUES('USER_EDIT_MENU', 'USER_ATTRIBUTES');
INSERT INTO res_to_res_membership (RESOURCE_ID, MEMBER_RESOURCE_ID) VALUES('USER_EDIT_MENU', 'USER_ENTITLEMENTS');
INSERT INTO res_to_res_membership (RESOURCE_ID, MEMBER_RESOURCE_ID) VALUES('USER_EDIT_MENU', 'USER_HISTORY');
INSERT INTO res_to_res_membership (RESOURCE_ID, MEMBER_RESOURCE_ID) VALUES('USER_EDIT_MENU', 'USER_DELEGATION');


INSERT INTO RESOURCE_ROLE (RESOURCE_ID, ROLE_ID)
  VALUES ('USER_SEARCH',9),
         ('USER_EDIT_INFO',9),
         ('USER_EDIT_CONTACT_INFO',9),
         ('USER_ATTRIBUTES',9),
         ('USER_ENTITLEMENTS',9),
         ('USER_HISTORY',9),
         ('USER_DELEGATION',9),
         ('NEW_USER',9);

/* new file */
use openiam;

UPDATE RES SET URL='/webconsole/organizations.html' WHERE RESOURCE_ID='ORG';
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('ORG_MENU_PUBLIC', 'ORG', 'MENU_IS_PUBLIC', 'true');

/* org root menus */
INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION, URL) VALUES('ORGANIZATION_ROOT_ID', 'MENU_ITEM', 'ORGANIZATION_ROOT_ID', 'Organization Root Menus','/webconsole/organizations.html');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('ORGANIZATION_ROOT_ID_PUB', 'ORGANIZATION_ROOT_ID', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('ORGANIZATION_ROOT_ID_DESC', 'ORGANIZATION_ROOT_ID', 'MENU_DISPLAY_NAME', 'Organization Root Menus');


INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION, URL) VALUES('ORG_SEARCH', 'MENU_ITEM', 'ORG_SEARCH', 'Organization Search','/webconsole/organizations.html');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('ORG_SEARCH_PUB', 'ORG_SEARCH', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('ORG_SEARCH_DESC', 'ORG_SEARCH', 'MENU_DISPLAY_NAME', 'Organization Search');

INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION, URL) VALUES('NEW_ORG', 'MENU_ITEM', 'NEW_ORG', 'New Organization','/webconsole/editOrganization.html');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('NEW_ORG_PUB', 'NEW_ORG', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('NEW_ORG_DESC', 'NEW_ORG', 'MENU_DISPLAY_NAME', 'Create New Organization');

INSERT INTO res_to_res_membership (RESOURCE_ID, MEMBER_RESOURCE_ID) VALUES('ORGANIZATION_ROOT_ID', 'ORG_SEARCH');
INSERT INTO res_to_res_membership (RESOURCE_ID, MEMBER_RESOURCE_ID) VALUES('ORGANIZATION_ROOT_ID', 'NEW_ORG');


/* org edit menus */
INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION) VALUES('ORGANIZATION_EDIT_ID', 'MENU_ITEM', 'ORGANIZATION_EDIT_ID', 'Organization Edit Menus');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('ORGANIZATION_EDIT_ID_PUB', 'ORGANIZATION_EDIT_ID', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('ORGANIZATION_EDIT_ID_DESC', 'ORGANIZATION_EDIT_ID', 'MENU_DISPLAY_NAME', 'Organization Edit Menus');

INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION, URL) VALUES('EDIT_ORG', 'MENU_ITEM', 'EDIT_ORG', 'Edit Organization', '/webconsole/editOrganization.html');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('EDIT_ORG_PUB', 'EDIT_ORG', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('EDIT_ORG_DESC', 'EDIT_ORG', 'MENU_DISPLAY_NAME', 'Edit Organization');

INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION, URL) VALUES('ORG_ATTRIBUTES', 'MENU_ITEM', 'ORG_ATTRIBUTES', 'Organization Attributes','/webconsole/organizationAttributes.html');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('ORG_ATTRIBUTES_PUB', 'ORG_ATTRIBUTES', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('ORG_ATTRIBUTES_DESC', 'ORG_ATTRIBUTES', 'MENU_DISPLAY_NAME', 'Organization Attributes');

INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION, URL) VALUES('ORG_MEMBERSHIP', 'MENU_ITEM', 'ORG_MEMBERSHIP', 'Organization Membership','/webconsole/organizationMembership.html');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('ORG_MEMBERSHIP_PUB', 'ORG_MEMBERSHIP', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('ORG_MEMBERSHIP_DESC', 'ORG_MEMBERSHIP', 'MENU_DISPLAY_NAME', 'Organization Membership');

INSERT INTO res_to_res_membership (RESOURCE_ID, MEMBER_RESOURCE_ID) VALUES('ORGANIZATION_EDIT_ID', 'EDIT_ORG');
INSERT INTO res_to_res_membership (RESOURCE_ID, MEMBER_RESOURCE_ID) VALUES('ORGANIZATION_EDIT_ID', 'ORG_ATTRIBUTES');
INSERT INTO res_to_res_membership (RESOURCE_ID, MEMBER_RESOURCE_ID) VALUES('ORGANIZATION_EDIT_ID', 'ORG_MEMBERSHIP');
/* new file */
use openiam;

DELETE FROM res_to_res_membership WHERE MEMBER_RESOURCE_ID IN('USER_MENUS', 'GROUP_MENUS', 'ROLE_MENUS');
DELETE FROM RESOURCE_PROP WHERE RESOURCE_ID IN('USER_MENUS', 'GROUP_MENUS', 'ROLE_MENUS');
DELETE FROM RES WHERE RESOURCE_ID IN('USER_MENUS', 'GROUP_MENUS', 'ROLE_MENUS');

INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION, URL) VALUES('USER_MENUS', 'MENU_ITEM', 'USER_MENUS', 'User Menus', '/webconsole/userMenuTree.html');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('USER_MENUS_PUB', 'USER_MENUS', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('USER_MENUS_DESC', 'USER_MENUS', 'MENU_DISPLAY_NAME', 'Menus');

INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION, URL) VALUES('GROUP_MENUS', 'MENU_ITEM', 'GROUP_MENUS', 'Group Menus', '/webconsole/groupMenuTree.html');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('GROUP_MENUS_PUB', 'GROUP_MENUS', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('GROUP_MENUS_DESC', 'GROUP_MENUS', 'MENU_DISPLAY_NAME', 'Menus');

INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION, URL) VALUES('ROLE_MENUS', 'MENU_ITEM', 'ROLE_MENUS', 'Role Menus', '/webconsole/roleMenuTree.html');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('ROLE_MENUS_PUB', 'ROLE_MENUS', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('ROLE_MENUS_DESC', 'ROLE_MENUS', 'MENU_DISPLAY_NAME', 'Menus');

INSERT INTO res_to_res_membership (RESOURCE_ID, MEMBER_RESOURCE_ID) VALUES('USER_EDIT_MENU', 'USER_MENUS');
INSERT INTO res_to_res_membership (RESOURCE_ID, MEMBER_RESOURCE_ID) VALUES('GROUP_EDIT_MENU', 'GROUP_MENUS');
INSERT INTO res_to_res_membership (RESOURCE_ID, MEMBER_RESOURCE_ID) VALUES('ROLE_EDIT_MENU', 'ROLE_MENUS');
/* new file */
use openiam;

DROP TABLE USER_PRIVILEGE;
/* new file */
use openiam;

ALTER TABLE EMAIL_ADDRESS 
	CHANGE COLUMN IS_DEFAULT IS_DEFAULT CHAR(1) NULL DEFAULT 'N', 
	CHANGE COLUMN ACTIVE ACTIVE CHAR(1) NULL DEFAULT 'Y';

ALTER TABLE ADDRESS
	CHANGE COLUMN IS_DEFAULT IS_DEFAULT CHAR(1) NULL DEFAULT 'N',
	CHANGE COLUMN ACTIVE ACTIVE CHAR(1) NULL DEFAULT 'Y';

ALTER TABLE PHONE
	CHANGE COLUMN IS_DEFAULT IS_DEFAULT CHAR(1) NULL DEFAULT 'N',
	CHANGE COLUMN ACTIVE ACTIVE CHAR(1) NULL DEFAULT 'Y';

update EMAIL_ADDRESS
	set IS_DEFAULT = case when IS_DEFAULT is null or IS_DEFAULT='0' THEN 'N' ELSE 'Y' END,
	    ACTIVE = case when ACTIVE is null or ACTIVE='0' THEN 'N' ELSE 'Y' END;

update ADDRESS
	set IS_DEFAULT = case when IS_DEFAULT is null or IS_DEFAULT='0' THEN 'N' ELSE 'Y' END,
	    ACTIVE = case when ACTIVE is null or ACTIVE='0' THEN 'N' ELSE 'Y' END;

update PHONE
	set IS_DEFAULT = case when IS_DEFAULT is null or IS_DEFAULT='0' THEN 'N' ELSE 'Y' END,
	    ACTIVE = case when ACTIVE is null or ACTIVE='0' THEN 'N' ELSE 'Y' END;

/* new file */
use openiam;

ALTER TABLE RESOURCE_TYPE MODIFY METADATA_TYPE_ID VARCHAR(32);
/* new file */
use openiam;

INSERT INTO METADATA_TYPE (TYPE_ID, DESCRIPTION, ACTIVE, SYNC_MANAGED_SYS) VALUES('MENU_ITEM', 'Menu Item Type', 1, 1);
INSERT INTO METADATA_TYPE (TYPE_ID, DESCRIPTION, ACTIVE, SYNC_MANAGED_SYS) VALUES('AUTHENTICATION_PROVIDER', 'Authentication Provider', 1, 1);
INSERT INTO RESOURCE_TYPE (RESOURCE_TYPE_ID, DESCRIPTION, METADATA_TYPE_ID) VALUES ('AUTH_PROVIDER', 'Authentication Provider', 'AUTHENTICATION_PROVIDER');
/* new file */
use openiam;

UPDATE RES SET IS_PUBLIC='Y' WHERE NAME='SELFSERVICE';

DELETE FROM RESOURCE_PROP WHERE RESOURCE_ID IN('SELFSERVICE_MYINFO', 'SELFSERVICE_MYAPPS');
DELETE FROM res_to_res_membership WHERE RESOURCE_ID IN('SELFSERVICE_MYINFO', 'SELFSERVICE_MYAPPS');
DELETE FROM res_to_res_membership WHERE MEMBER_RESOURCE_ID IN('SELFSERVICE_MYINFO', 'SELFSERVICE_MYAPPS');
DELETE FROM RES WHERE RESOURCE_ID IN('SELFSERVICE_MYINFO', 'SELFSERVICE_MYAPPS');


INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION, URL) VALUES('SELFSERVICE_MYINFO', 'MENU_ITEM', 'SELFSERVICE_MYINFO', 'My Info', '/selfservice/myInfo.html');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('SELFSERVICE_MYINFO_PUB', 'SELFSERVICE_MYINFO', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('SELFSERVICE_MYINFO_DESC', 'SELFSERVICE_MYINFO', 'MENU_DISPLAY_NAME', 'My Info');
INSERT INTO res_to_res_membership (RESOURCE_ID, MEMBER_RESOURCE_ID) VALUES('SELFSERVICE', 'SELFSERVICE_MYINFO');

INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION, URL) VALUES('SELFSERVICE_MYAPPS', 'MENU_ITEM', 'SELFSERVICE_MYAPPS', 'My Applications', '/selfservice/myApplications.html');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('SELFSERVICE_MYAPPS_PUB', 'SELFSERVICE_MYAPPS', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('SELFSERVICE_MYAPPS_DESC', 'SELFSERVICE_MYAPPS', 'MENU_DISPLAY_NAME', 'My Applications');
INSERT INTO res_to_res_membership (RESOURCE_ID, MEMBER_RESOURCE_ID) VALUES('SELFSERVICE', 'SELFSERVICE_MYAPPS');
/* new file */
use openiam;

INSERT INTO METADATA_TYPE (TYPE_ID, DESCRIPTION, ACTIVE, SYNC_MANAGED_SYS) VALUES('CONTENT_PROVIDER', 'Content Provider', 1, 1);
INSERT INTO METADATA_TYPE (TYPE_ID, DESCRIPTION, ACTIVE, SYNC_MANAGED_SYS) VALUES('URL_PATTERN', 'Url Pattern', 1, 1);
INSERT INTO RESOURCE_TYPE (RESOURCE_TYPE_ID, DESCRIPTION, METADATA_TYPE_ID) VALUES ('CONTENT_PROVIDER', 'Content Provider', 'CONTENT_PROVIDER');
INSERT INTO RESOURCE_TYPE (RESOURCE_TYPE_ID, DESCRIPTION, METADATA_TYPE_ID) VALUES ('URL_PATTERN', 'Url Pattern', 'URL_PATTERN');
/* new file */
use openiam;

ALTER TABLE RES DROP COLUMN IS_URL_PROTECTOR;
/* new file */
use openiam;

ALTER TABLE RES CHANGE COLUMN NAME NAME VARCHAR(150) NOT NULL;

/* new file */
use openiam;

UPDATE POLICY_ATTRIBUTE SET VALUE1='defaultLoginModule' WHERE POLICY_ATTR_ID=4108;
/* new file */
use openiam;

update IDM_AUDIT_LOG set ACTION_DATETIME = now() where ACTION_DATETIME is null;
/* new file */
use openiam;

UPDATE RES SET URL='/webconsole-idm/provisioning/connectorlist.html' where RESOURCE_ID='PROVCONNECT';

INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION, URL) VALUES('PROVCONNECT_MENU_ITEM', 'MENU_ITEM', 'PROVCONNECT_MENU_ITEM', 'Provisioning Connectors', '/webconsole-idm/provisioning/connectorlist.html');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('PROVCONNECT_PUB', 'PROVCONNECT_MENU_ITEM', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('PROVCONNECT_DESC', 'PROVCONNECT_MENU_ITEM', 'MENU_DISPLAY_NAME', 'Provisioning Connectors');

INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION, URL) VALUES('PROV_CONNECTOR_NEW', 'MENU_ITEM', 'PROV_CONNECTOR_NEW', 'Create Provisioning Connector', '/webconsole-idm/provisioning/connector.html');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('PROV_CONNECTOR_NEW_PUB', 'PROV_CONNECTOR_NEW', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('PROV_CONNECTOR_DSC', 'PROV_CONNECTOR_NEW', 'MENU_DISPLAY_NAME', 'Create New Connector');

INSERT INTO res_to_res_membership (RESOURCE_ID, MEMBER_RESOURCE_ID) VALUES('PROVCONNECT_MENU_ITEM', 'PROV_CONNECTOR_NEW');

/* new file */
use openiam;

ALTER TABLE IDENTITY_QUESTION ADD COLUMN TEMP_REQUIRED CHAR(1) DEFAULT 'N';
ALTER TABLE IDENTITY_QUESTION ADD COLUMN TEMP_ACTIVE CHAR(1) DEFAULT 'Y';
UPDATE IDENTITY_QUESTION SET TEMP_REQUIRED='Y' WHERE REQUIRED=1;
UPDATE IDENTITY_QUESTION SET TEMP_REQUIRED='N' WHERE REQUIRED=0;
UPDATE IDENTITY_QUESTION SET TEMP_ACTIVE='Y' WHERE ACTIVE=1;
UPDATE IDENTITY_QUESTION SET TEMP_ACTIVE='N' WHERE ACTIVE=0;
ALTER TABLE IDENTITY_QUESTION DROP COLUMN ACTIVE;
ALTER TABLE IDENTITY_QUESTION DROP COLUMN REQUIRED;
ALTER TABLE IDENTITY_QUESTION CHANGE TEMP_REQUIRED REQUIRED CHAR(1) DEFAULT 'N';
ALTER TABLE IDENTITY_QUESTION CHANGE TEMP_ACTIVE ACTIVE CHAR(1) DEFAULT 'Y';
/* new file */
use openiam;

UPDATE RES SET URL='/selfservice/changePasswordInternal.html' WHERE RESOURCE_ID='CHNGPSWD';

UPDATE RES SET URL='/selfservice/editProfile.html' WHERE RESOURCE_ID IN('SELF_QUERYUSER', 'SELF_USERSUMMARY');

UPDATE RES SET URL='/selfservice/myIdentities.html' WHERE RESOURCE_ID='SELF_USERIDENTITY';

UPDATE RES SET URL='/selfservice/challengeResponse.html' WHERE RESOURCE_ID='IDQUEST';

UPDATE RES SET URL='/selfservice/resetPasswordInternal.html' WHERE RESOURCE_ID='SELF_USERPSWDRESET';

DELETE FROM RESOURCE_PROP WHERE RESOURCE_ID IN('SELF_LOGIN_ROOT', 'SELF_LOGIN_LIST', 'SELF_LOGIN_NEW');
DELETE FROM res_to_res_membership WHERE RESOURCE_ID IN('SELF_LOGIN_ROOT', 'SELF_LOGIN_LIST', 'SELF_LOGIN_NEW');
DELETE FROM res_to_res_membership WHERE MEMBER_RESOURCE_ID IN('SELF_LOGIN_ROOT', 'SELF_LOGIN_LIST', 'SELF_LOGIN_NEW');
DELETE FROM RES WHERE RESOURCE_ID IN('SELF_LOGIN_ROOT', 'SELF_LOGIN_LIST', 'SELF_LOGIN_NEW');


INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION) VALUES('SELF_LOGIN_ROOT', 'MENU_ITEM', 'SELF_LOGIN_ROOT', 'SelfService Login Root Context Menu');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('SELF_LOGIN_ROOT_PUB', 'SELF_LOGIN_ROOT', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('SELF_LOGIN_ROOT_DESC', 'SELF_LOGIN_ROOT', 'MENU_DISPLAY_NAME', 'SelfService Login Root');


INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION, URL) VALUES('SELF_LOGIN_LIST', 'MENU_ITEM', 'SELF_LOGIN_LIST', 'My Identities','/selfservice/myIdentities.html');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('SELF_LOGIN_LIST_PUB', 'SELF_LOGIN_LIST', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('SELF_LOGIN_LIST_DESC', 'SELF_LOGIN_LIST', 'MENU_DISPLAY_NAME', 'My Identities');

INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION, URL) VALUES('SELF_LOGIN_NEW', 'MENU_ITEM', 'SELF_LOGIN_NEW', 'New Login','/selfservice/identity.html');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('SELF_LOGIN_NEW_PUB', 'SELF_LOGIN_NEW', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('SELF_LOGIN_NEW_DESC', 'SELF_LOGIN_NEW', 'MENU_DISPLAY_NAME', 'New Login');

INSERT INTO res_to_res_membership (RESOURCE_ID, MEMBER_RESOURCE_ID) VALUES('SELF_LOGIN_ROOT', 'SELF_LOGIN_LIST');
INSERT INTO res_to_res_membership (RESOURCE_ID, MEMBER_RESOURCE_ID) VALUES('SELF_LOGIN_ROOT', 'SELF_LOGIN_NEW');

/* new file */
use openiam;

UPDATE RES SET URL='/webconsole-idm/provisioning/mngsystemlist.html' where RESOURCE_ID='MNGSYS';

INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION, URL) VALUES('MNGSYS_MENU_ITEM', 'MENU_ITEM', 'MNGSYS_MENU_ITEM', 'Managed Systems', '/webconsole-idm/provisioning/mngsystemlist.html');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('MNGSYS_PUB', 'MNGSYS_MENU_ITEM', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('MNGSYS_DESC', 'MNGSYS_MENU_ITEM', 'MENU_DISPLAY_NAME', 'Managed Systems');

INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION, URL) VALUES('MNGSYS_NEW', 'MENU_ITEM', 'MNGSYS_NEW', 'Create Managed System', '/webconsole-idm/provisioning/mngsystem.html');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('MNGSYS_NEW_PUB', 'MNGSYS_NEW', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('MNGSYS_DSC', 'MNGSYS_NEW', 'MENU_DISPLAY_NAME', 'Create New Managed System');


INSERT INTO res_to_res_membership (RESOURCE_ID, MEMBER_RESOURCE_ID) VALUES('MNGSYS_MENU_ITEM', 'MNGSYS_NEW');


/* new file */
use openiam;

ALTER TABLE MANAGED_SYS change HNDLR_1 SEARCH_HNDLR VARCHAR(100);
ALTER TABLE MANAGED_SYS change HNDLR_2 LOOKUP_HNDLR VARCHAR(100);
ALTER TABLE MANAGED_SYS change HNDLR_3 TEST_CONNECTION_HNDLR VARCHAR(100);
ALTER TABLE MANAGED_SYS change HNDLR_4 RECONCILE_RESOURCE_HNDLR VARCHAR(100);
/* new file */
use openiam;

ALTER TABLE USER_IDENTITY_ANS MODIFY COLUMN IDENTITY_QUESTION_ID VARCHAR(32) NOT NULL;
ALTER TABLE USER_IDENTITY_ANS DROP COLUMN QUESTION_TEXT;
/* new file */
use openiam;

ALTER TABLE IDENTITY_QUESTION DROP COLUMN USER_ID;
ALTER TABLE IDENTITY_QUESTION DROP COLUMN REQUIRED;
/* new file */
use openiam;

ALTER TABLE EMAIL_ADDRESS ADD COLUMN LAST_UPDATE TIMESTAMP NULL;
ALTER TABLE EMAIL_ADDRESS ADD COLUMN CREATE_DATE TIMESTAMP NULL DEFAULT NOW();

DELIMITER $$

CREATE TRIGGER ON_EMAIL_INSERT 
BEFORE 
INSERT ON EMAIL_ADDRESS 
	FOR EACH ROW
	BEGIN
		SET NEW.CREATE_DATE = NOW();
		SET NEW.LAST_UPDATE = NOW();
	END$$
	
CREATE TRIGGER ON_EMAIL_UPDATE
BEFORE 
UPDATE ON EMAIL_ADDRESS 
	FOR EACH ROW
	BEGIN
		SET NEW.LAST_UPDATE = NOW();
	END$$
	
DELIMITER ;


ALTER TABLE PHONE ADD COLUMN LAST_UPDATE TIMESTAMP NULL;
ALTER TABLE PHONE ADD COLUMN CREATE_DATE TIMESTAMP NULL DEFAULT NOW();

DELIMITER $$

CREATE TRIGGER ON_PHONE_INSERT 
BEFORE 
INSERT ON PHONE 
	FOR EACH ROW
	BEGIN
		SET NEW.CREATE_DATE = NOW();
		SET NEW.LAST_UPDATE = NOW();
	END$$
	
CREATE TRIGGER ON_PHONE_UPDATE
BEFORE 
UPDATE ON PHONE 
	FOR EACH ROW
	BEGIN
		SET NEW.LAST_UPDATE = NOW();
	END$$
	
DELIMITER ;

ALTER TABLE ADDRESS ADD COLUMN LAST_UPDATE TIMESTAMP NULL;
ALTER TABLE ADDRESS ADD COLUMN CREATE_DATE TIMESTAMP NULL DEFAULT NOW();

DELIMITER $$

CREATE TRIGGER ON_ADDRESS_INSERT 
BEFORE 
INSERT ON ADDRESS 
	FOR EACH ROW
	BEGIN
		SET NEW.CREATE_DATE = NOW();
		SET NEW.LAST_UPDATE = NOW();
	END$$
	
CREATE TRIGGER ON_ADDRESS_UPDATE
BEFORE 
UPDATE ON ADDRESS 
	FOR EACH ROW
	BEGIN
		SET NEW.LAST_UPDATE = NOW();
	END$$
	
DELIMITER ;
/* new file */
use openiam;

ALTER TABLE EMAIL_ADDRESS DROP COLUMN PARENT_TYPE;
ALTER TABLE PHONE DROP COLUMN PARENT_TYPE;
ALTER TABLE ADDRESS DROP COLUMN PARENT_TYPE;
/* new file */
use openiam;

DELETE FROM EMAIL_ADDRESS WHERE PARENT_ID NOT IN (SELECT USER_ID FROM USERS);
DELETE FROM PHONE WHERE PARENT_ID NOT IN (SELECT USER_ID FROM USERS);
DELETE FROM ADDRESS WHERE PARENT_ID NOT IN (SELECT USER_ID FROM USERS);

ALTER TABLE EMAIL_ADDRESS ADD CONSTRAINT EMAIL_ADDRESS_USER_FK FOREIGN KEY (PARENT_ID) REFERENCES USERS(USER_ID);
ALTER TABLE PHONE ADD CONSTRAINT PHONE_USER_FK FOREIGN KEY (PARENT_ID) REFERENCES USERS(USER_ID);
ALTER TABLE ADDRESS ADD CONSTRAINT ADDRESS_USER_FK FOREIGN KEY (PARENT_ID) REFERENCES USERS(USER_ID);
/* new file */
use openiam;

ALTER TABLE USERS DROP COLUMN PHONE_EXT,
                  DROP COLUMN PHONE_NBR,
                  DROP COLUMN COUNTRY_CD,
                  DROP COLUMN AREA_CD,
                  DROP COLUMN EMAIL_ADDRESS,
                  DROP COLUMN POSTAL_CD,
                  DROP COLUMN STATE,
                  DROP COLUMN CITY,
                  DROP COLUMN ADDRESS7,
                  DROP COLUMN ADDRESS6,
                  DROP COLUMN ADDRESS5,
                  DROP COLUMN ADDRESS4,
                  DROP COLUMN ADDRESS3,
                  DROP COLUMN ADDRESS2,
                  DROP COLUMN ADDRESS1,
                  DROP COLUMN SUITE,
                  DROP COLUMN STREET_DIRECTION,
                  DROP COLUMN BLDG_NUM,
                  DROP COLUMN COUNTRY;
/* new file */
use openiam;

DROP VIEW IF EXISTS USER_EMAIL_VW;
DROP VIEW IF EXISTS USER_IDENTITY_VW;
DROP VIEW IF EXISTS USER_PHONE_VW;
/* new file */
use openiam;
ALTER TABLE CATEGORY_LANGUAGE DROP FOREIGN KEY FK_CATEGORY_LANGUAGE_LANGUAGE;
ALTER TABLE CATEGORY_LANGUAGE CHANGE COLUMN LANGUAGE_CD LANGUAGE_ID VARCHAR(32) NOT NULL;
ALTER TABLE EXCLUDE_WORD_LIST DROP FOREIGN KEY FK_EXCLUDE_WORD_LIST_LANGUAGE;
ALTER TABLE EXCLUDE_WORD_LIST CHANGE COLUMN LANGUAGE_CD LANGUAGE_ID VARCHAR(32) NOT NULL;


truncate table LANGUAGE;
ALTER TABLE LANGUAGE
    DROP PRIMARY KEY,
    DROP COLUMN LANGUAGE_CD,
    ADD COLUMN ID VARCHAR(32) NOT NULL FIRST,
    ADD COLUMN IS_USED VARCHAR(1) NOT NULL DEFAULT 'N',
    CHANGE COLUMN LOCALE LOCALE VARCHAR(10) NULL DEFAULT NULL,
    ADD PRIMARY KEY(ID);


ALTER TABLE EXCLUDE_WORD_LIST
  ADD CONSTRAINT FK_EXCLUDE_WORD_LIST_LANGUAGE FOREIGN KEY (LANGUAGE_ID) REFERENCES LANGUAGE(ID);
ALTER TABLE CATEGORY_LANGUAGE
  ADD CONSTRAINT FK_CATEGORY_LANGUAGE_LANGUAGE FOREIGN KEY (LANGUAGE_ID) REFERENCES LANGUAGE(ID);
/* new file */
use openiam;

insert into LANGUAGE(ID, LANGUAGE, LOCALE, IS_USED)
       values ('1', 'English', 'en_EN', 'Y'),
              ('2', 'German', 'de_DE', 'N'),
              ('3', 'French', 'fr_FR', 'N'),
              ('4', 'Spanish', 'es_ES', 'N'),
              ('5', 'Italian', 'it_IT', 'N'),
              ('6', 'Dutch', 'nl_NL', 'N'),
              ('7', 'Portugese', 'pt_PT', 'N');
/* new file */
use openiam;

ALTER TABLE METADATA_ELEMENT DROP COLUMN MIN_LEN;
ALTER TABLE METADATA_ELEMENT DROP COLUMN MAX_LEN;
ALTER TABLE METADATA_ELEMENT DROP COLUMN TEXT_CASE;
ALTER TABLE METADATA_ELEMENT DROP COLUMN MIN_VALUE;
ALTER TABLE METADATA_ELEMENT DROP COLUMN MAX_VALUE;
ALTER TABLE METADATA_ELEMENT DROP COLUMN DEFAULT_VALUE;
ALTER TABLE METADATA_ELEMENT DROP COLUMN VALUE_LIST;
ALTER TABLE METADATA_ELEMENT DROP COLUMN LABEL;
ALTER TABLE METADATA_ELEMENT DROP COLUMN MULTI_VALUE;
ALTER TABLE METADATA_ELEMENT DROP COLUMN UI_TYPE;
ALTER TABLE METADATA_ELEMENT DROP COLUMN UI_OBJECT_SIZE;
ALTER TABLE METADATA_ELEMENT DROP COLUMN VALUE_SRC;

ALTER TABLE METADATA_ELEMENT ADD TEMP_AUDITABLE CHAR(1) NULL DEFAULT 'Y';
UPDATE METADATA_ELEMENT SET TEMP_AUDITABLE='Y' WHERE AUDITABLE=1;
UPDATE METADATA_ELEMENT SET TEMP_AUDITABLE='N' WHERE AUDITABLE=0;
ALTER TABLE METADATA_ELEMENT DROP COLUMN AUDITABLE;
ALTER TABLE METADATA_ELEMENT CHANGE TEMP_AUDITABLE AUDITABLE CHAR(1) NOT NULL DEFAULT 'Y';

ALTER TABLE METADATA_ELEMENT ADD TEMP_REQUIRED CHAR(1) NULL DEFAULT 'N';
UPDATE METADATA_ELEMENT SET TEMP_REQUIRED='Y' WHERE REQUIRED=1;
UPDATE METADATA_ELEMENT SET TEMP_REQUIRED='N' WHERE REQUIRED=0;
ALTER TABLE METADATA_ELEMENT DROP COLUMN REQUIRED;
ALTER TABLE METADATA_ELEMENT CHANGE TEMP_REQUIRED REQUIRED CHAR(1) NOT NULL DEFAULT 'N';

ALTER TABLE METADATA_ELEMENT ADD TEMP_SELF_EDITABLE CHAR(1) NULL DEFAULT 'N';
UPDATE METADATA_ELEMENT SET TEMP_SELF_EDITABLE='Y' WHERE SELF_EDITABLE=1;
UPDATE METADATA_ELEMENT SET TEMP_SELF_EDITABLE='N' WHERE SELF_EDITABLE=0;
ALTER TABLE METADATA_ELEMENT DROP COLUMN SELF_EDITABLE;
ALTER TABLE METADATA_ELEMENT CHANGE TEMP_SELF_EDITABLE SELF_EDITABLE CHAR(1) NOT NULL DEFAULT 'N';

ALTER TABLE METADATA_ELEMENT DROP COLUMN SELF_VIEWABLE;
/* new file */
use openiam;	

DELIMITER $$

DROP PROCEDURE IF EXISTS METADATA_SCHEMA_CHANGE$$

CREATE PROCEDURE METADATA_SCHEMA_CHANGE()
	BEGIN
		IF EXISTS (SELECT * FROM information_schema.columns WHERE table_name = 'METADATA_ELEMENT' AND column_name = 'DEFAULT_VALUE_ID') THEN
			ALTER TABLE METADATA_ELEMENT DROP FOREIGN KEY METADATA_ELEMENT_DEFAULT_VALUE_FK;
			ALTER TABLE METADATA_ELEMENT DROP COLUMN DEFAULT_VALUE_ID;
 		END IF;
 		
		IF EXISTS (SELECT * FROM information_schema.columns WHERE table_name = 'METADATA_ELEMENT' AND column_name = 'TEMPLATE_ID') THEN
			ALTER TABLE METADATA_ELEMENT DROP FOREIGN KEY METADATA_ELEMENT_TEMPLATE_FK;
			ALTER TABLE METADATA_ELEMENT DROP COLUMN TEMPLATE_ID;
 		END IF;
 		
 		IF EXISTS (SELECT * FROM information_schema.columns WHERE table_name = 'METADATA_ELEMENT' AND column_name = 'RESOURCE_ID') THEN
 			ALTER TABLE METADATA_ELEMENT DROP FOREIGN KEY METADATA_ELEMENT_RES_FK;
			ALTER TABLE METADATA_ELEMENT DROP COLUMN RESOURCE_ID;
 		END IF;
 		
 		IF EXISTS (SELECT * FROM information_schema.columns WHERE table_name = 'METADATA_ELEMENT' AND column_name = 'DISPLAY_NAME') THEN
 			ALTER TABLE METADATA_ELEMENT DROP FOREIGN KEY METADATA_ELEMENT_DISPLAY_NAME_FK;
			ALTER TABLE METADATA_ELEMENT DROP COLUMN DISPLAY_NAME;
 		END IF;
 		
 		 IF EXISTS (SELECT * FROM information_schema.columns WHERE table_name = 'METADATA_ELEMENT' AND column_name = 'DISPLAY_ORDER') THEN
			ALTER TABLE METADATA_ELEMENT DROP COLUMN DISPLAY_ORDER;
 		END IF;
 		
 		IF EXISTS (SELECT * FROM information_schema.columns WHERE table_name = 'METADATA_ELEMENT' AND column_name = 'VALIDATOR') THEN
			ALTER TABLE METADATA_ELEMENT DROP COLUMN VALIDATOR;
 		END IF;
 		
 		IF EXISTS (SELECT * FROM information_schema.columns WHERE table_name = 'METADATA_ELEMENT' AND column_name = 'STATIC_DEFAULT_VALUE') THEN
 			ALTER TABLE METADATA_ELEMENT DROP COLUMN STATIC_DEFAULT_VALUE;
 		END IF;

 		IF EXISTS (SELECT * FROM information_schema.columns WHERE table_name = 'METADATA_ELEMENT' AND column_name = 'DISPLAY_ORDER') THEN
 			ALTER TABLE METADATA_ELEMENT DROP COLUMN DISPLAY_ORDER;
 		END IF;

 		IF EXISTS (SELECT * FROM information_schema.columns WHERE table_name = 'METADATA_ELEMENT' AND column_name = 'IS_PUBLIC') THEN
 			ALTER TABLE METADATA_ELEMENT DROP COLUMN IS_PUBLIC;
 		END IF;
 		
 		IF EXISTS (SELECT * FROM information_schema.columns WHERE table_name = 'METADATA_TYPE' AND column_name = 'IS_PUBLIC') THEN
 			ALTER TABLE METADATA_TYPE DROP COLUMN IS_PUBLIC;
 		END IF;
 		
 		IF EXISTS (SELECT * FROM information_schema.columns WHERE table_name = 'USER_ATTRIBUTES' AND column_name = 'METADATA_ELEMENT_ID') THEN
 			DELETE FROM USER_ATTRIBUTES WHERE METADATA_ELEMENT_ID IS NOT NULL;
 			ALTER TABLE USER_ATTRIBUTES DROP FOREIGN KEY USER_ATTR_METADATA_ELEMENT_FK;
 			ALTER TABLE USER_ATTRIBUTES DROP COLUMN METADATA_ELEMENT_ID;
 		END IF;
	END$$
DELIMITER ;

call METADATA_SCHEMA_CHANGE();

DROP PROCEDURE METADATA_SCHEMA_CHANGE;

DROP TABLE IF EXISTS METADATA_ELEMENT_TEMPLATE_URI_PATTERN_XREF;
DROP TABLE IF EXISTS METADATA_ELEMENT_PAGE_TEMPLATE_XREF;
DROP TABLE IF EXISTS METADATA_ELEMENT_DEFAULT_VALUES;
DROP TABLE IF EXISTS METADATA_ELEMENT_VALID_VALUES;
DROP TABLE IF EXISTS METADATA_ELEMENT_PAGE_TEMPLATE;
DROP TABLE IF EXISTS LANGUAGE_MAPPING;

CREATE TABLE LANGUAGE_MAPPING (
  ID varchar(32) NOT NULL,
  LANGUAGE_ID varchar(32) NOT NULL,
  REFERENCE_ID varchar(32) NOT NULL,
  REFERENCE_TYPE varchar(100) NOT NULL,
  TEXT_VALUE varchar(400) NOT NULL,
  PRIMARY KEY(ID),
  CONSTRAINT LANGUAGE_MAPPING_LANGUAGE_FK FOREIGN KEY (LANGUAGE_ID) REFERENCES LANGUAGE(ID),
  CONSTRAINT LANGUAGE_MAPPING_UNIQUE UNIQUE(LANGUAGE_ID, REFERENCE_ID, REFERENCE_TYPE)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE METADATA_ELEMENT_PAGE_TEMPLATE (
  ID varchar(32) NOT NULL,
  NAME varchar(40) NOT NULL,
  RESOURCE_ID varchar(32) NOT NULL,
  IS_PUBLIC CHAR(1) NOT NULL DEFAULT 'Y',
  PRIMARY KEY(ID),
  CONSTRAINT METADATA_ELEMENT_PAGE_TEMPLATE_UNIQUE UNIQUE(NAME),
  CONSTRAINT METADATA_PAGE_TEMPLATE_RES_FK FOREIGN KEY (RESOURCE_ID) REFERENCES RES(RESOURCE_ID)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE METADATA_ELEMENT_TEMPLATE_URI_PATTERN_XREF (
	TEMPLATE_ID VARCHAR(32) NOT NULL,
	URI_PATTERN_ID VARCHAR(32) NOT NULL,
	CONSTRAINT TEMPLATE_PATTERN_XREF_TEMPLATE_FK FOREIGN KEY (TEMPLATE_ID) REFERENCES METADATA_ELEMENT_PAGE_TEMPLATE(ID),
	CONSTRAINT TEMPLATE_PATTERN_XREF_PATTERN_FK FOREIGN KEY (URI_PATTERN_ID) REFERENCES URI_PATTERN(URI_PATTERN_ID)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE METADATA_ELEMENT_VALID_VALUES (
  ID varchar(32) NOT NULL,
  METADATA_ELEMENT_ID varchar(32) NOT NULL,
  UI_VALUE varchar(200) NULL NOT NULL,
  PRIMARY KEY(ID),
  CONSTRAINT METADATA_FIELD_VALID_VALUES_ELEMENT_FK FOREIGN KEY (METADATA_ELEMENT_ID) REFERENCES METADATA_ELEMENT(METADATA_ID)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE  TABLE METADATA_ELEMENT_PAGE_TEMPLATE_XREF(
  TEMPLATE_ID VARCHAR(32) NOT NULL,
  METADATA_ELEMENT_ID VARCHAR(32) NOT NULL,
  DISPLAY_ORDER INT(11) NOT NULL,
  PRIMARY KEY (TEMPLATE_ID, METADATA_ELEMENT_ID),
  CONSTRAINT METADATA_ELEMENT_PAGE_TEMPLATE_ELEMENT_FK
    FOREIGN KEY (METADATA_ELEMENT_ID) REFERENCES METADATA_ELEMENT(METADATA_ID),
  CONSTRAINT METADATA_ELEMENT_PAGE_TEMPLATE_FK
    FOREIGN KEY (TEMPLATE_ID) REFERENCES METADATA_ELEMENT_PAGE_TEMPLATE(ID)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;


ALTER TABLE METADATA_ELEMENT ADD TEMPLATE_ID VARCHAR(32) NULL;
ALTER TABLE METADATA_ELEMENT ADD CONSTRAINT METADATA_ELEMENT_TEMPLATE_FK FOREIGN KEY (TEMPLATE_ID) REFERENCES METADATA_ELEMENT_PAGE_TEMPLATE(ID);

ALTER TABLE METADATA_ELEMENT ADD RESOURCE_ID VARCHAR(32) NULL;
ALTER TABLE METADATA_ELEMENT ADD CONSTRAINT METADATA_ELEMENT_RES_FK FOREIGN KEY (RESOURCE_ID) REFERENCES RES(RESOURCE_ID);

ALTER TABLE METADATA_ELEMENT ADD VALIDATOR VARCHAR(150) NULL;

ALTER TABLE METADATA_ELEMENT ADD STATIC_DEFAULT_VALUE VARCHAR(400) NULL;

ALTER TABLE USER_ATTRIBUTES MODIFY METADATA_ID VARCHAR(32) NULL;

ALTER TABLE METADATA_ELEMENT ADD IS_PUBLIC CHAR(1) NOT NULL DEFAULT 'Y';
/* new file */
use openiam;

ALTER TABLE METADATA_TYPE ADD TEMP_ACTIVE CHAR(1) NULL DEFAULT 'N';
UPDATE METADATA_TYPE SET TEMP_ACTIVE='Y' WHERE ACTIVE=1;
UPDATE METADATA_TYPE SET TEMP_ACTIVE='N' WHERE ACTIVE=0;
ALTER TABLE METADATA_TYPE DROP COLUMN ACTIVE;
ALTER TABLE METADATA_TYPE CHANGE TEMP_ACTIVE ACTIVE CHAR(1) NOT NULL DEFAULT 'N';

ALTER TABLE METADATA_TYPE ADD TEMP_SYNC_MANAGED_SYS CHAR(1) NULL DEFAULT 'N';
UPDATE METADATA_TYPE SET TEMP_SYNC_MANAGED_SYS='Y' WHERE SYNC_MANAGED_SYS=1;
UPDATE METADATA_TYPE SET TEMP_SYNC_MANAGED_SYS='N' WHERE SYNC_MANAGED_SYS=0;
ALTER TABLE METADATA_TYPE DROP COLUMN SYNC_MANAGED_SYS;
ALTER TABLE METADATA_TYPE CHANGE TEMP_SYNC_MANAGED_SYS SYNC_MANAGED_SYS CHAR(1) NOT NULL DEFAULT 'N';
/* new file */
use openiam;

ALTER TABLE METADATA_TYPE ADD COLUMN GROUPING VARCHAR(100) NULL;
/* new file */
use openiam;

DELETE FROM res_to_res_membership WHERE MEMBER_RESOURCE_ID IN('TEMPLATE_SEARCH_CHILD', 'PAGE_TEMPLATE_ROOT', 'PAGE_TEMPLATE_SEARCH',
                                                              'PAGE_TEMPLATE_NEW', 'PAGE_TEMPLATE_EDIT','PAGE_TEMPLATE_EDIT_SEARCH',
                                                              'PAGE_TEMPLATE_EDIT_NEW', 'CUSTOM_FIELD_SEARCH_CHILD',
                                                              'CUSTOM_FIELD_ROOT','CUSTOM_FIELD_SEARCH','CUSTOM_FIELD_NEW',
                                                              'CUSTOM_FIELD_EDIT','CUSTOM_FIELD_EDIT_SEARCH','CUSTOM_FIELD_EDIT_NEW');

DELETE FROM res_to_res_membership WHERE RESOURCE_ID IN('TEMPLATE_SEARCH_CHILD', 'PAGE_TEMPLATE_ROOT', 'PAGE_TEMPLATE_SEARCH',
                                                       'PAGE_TEMPLATE_NEW', 'PAGE_TEMPLATE_EDIT','PAGE_TEMPLATE_EDIT_SEARCH',
                                                       'PAGE_TEMPLATE_EDIT_NEW', 'CUSTOM_FIELD_SEARCH_CHILD',
                                                       'CUSTOM_FIELD_ROOT','CUSTOM_FIELD_SEARCH','CUSTOM_FIELD_NEW',
                                                       'CUSTOM_FIELD_EDIT','CUSTOM_FIELD_EDIT_SEARCH','CUSTOM_FIELD_EDIT_NEW');

DELETE FROM RESOURCE_PROP WHERE RESOURCE_ID IN('TEMPLATE_SEARCH_CHILD', 'PAGE_TEMPLATE_ROOT', 'PAGE_TEMPLATE_SEARCH',
                                               'PAGE_TEMPLATE_NEW', 'PAGE_TEMPLATE_EDIT','PAGE_TEMPLATE_EDIT_SEARCH',
                                               'PAGE_TEMPLATE_EDIT_NEW', 'CUSTOM_FIELD_SEARCH_CHILD',
                                               'CUSTOM_FIELD_ROOT','CUSTOM_FIELD_SEARCH','CUSTOM_FIELD_NEW',
                                               'CUSTOM_FIELD_EDIT','CUSTOM_FIELD_EDIT_SEARCH','CUSTOM_FIELD_EDIT_NEW');

DELETE FROM RES WHERE RESOURCE_ID IN('TEMPLATE_SEARCH_CHILD', 'PAGE_TEMPLATE_ROOT', 'PAGE_TEMPLATE_SEARCH',
                                     'PAGE_TEMPLATE_NEW', 'PAGE_TEMPLATE_EDIT','PAGE_TEMPLATE_EDIT_SEARCH',
                                     'PAGE_TEMPLATE_EDIT_NEW', 'CUSTOM_FIELD_SEARCH_CHILD',
                                     'CUSTOM_FIELD_ROOT','CUSTOM_FIELD_SEARCH','CUSTOM_FIELD_NEW',
                                     'CUSTOM_FIELD_EDIT','CUSTOM_FIELD_EDIT_SEARCH','CUSTOM_FIELD_EDIT_NEW');


INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION, URL) VALUES('TEMPLATE_SEARCH_CHILD', 'MENU_ITEM', 'TEMPLATE_SEARCH_CHILD', 'Page Template Search', '/webconsole/pageTemplates.html');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('TEMPLATE_SEARCH_CHILD_PUB', 'TEMPLATE_SEARCH_CHILD', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('TEMPLATE_SEARCH_CHILD_DESC', 'TEMPLATE_SEARCH_CHILD', 'MENU_DISPLAY_NAME', 'Page Template');
INSERT INTO res_to_res_membership (RESOURCE_ID, MEMBER_RESOURCE_ID) VALUES('ADMIN', 'TEMPLATE_SEARCH_CHILD');

INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION) VALUES('PAGE_TEMPLATE_ROOT', 'MENU_ITEM', 'PAGE_TEMPLATE_ROOT', 'Page Template Root Menu');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('PAGE_TEMPLATE_ROOT_PUB', 'PAGE_TEMPLATE_ROOT', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('PAGE_TEMPLATE_ROOT_DESC', 'PAGE_TEMPLATE_ROOT', 'MENU_DISPLAY_NAME', 'Page Template Root Menu');


INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION, URL) VALUES('PAGE_TEMPLATE_SEARCH', 'MENU_ITEM', 'PAGE_TEMPLATE_SEARCH', 'Search Page Templates', '/webconsole/pageTemplates.html');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('PAGE_TEMPLATE_SEARCH_PUB', 'PAGE_TEMPLATE_SEARCH', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('PAGE_TEMPLATE_SEARCH_DESC', 'PAGE_TEMPLATE_SEARCH', 'MENU_DISPLAY_NAME', 'Search Page Templates');


INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION, URL) VALUES('PAGE_TEMPLATE_NEW', 'MENU_ITEM', 'PAGE_TEMPLATE_NEW', 'Create Content Provider', '/webconsole/newPageTemplate.html');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('PAGE_TEMPLATE_NEW_PUB', 'PAGE_TEMPLATE_NEW', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('PAGE_TEMPLATE_NEW_DSC', 'PAGE_TEMPLATE_NEW', 'MENU_DISPLAY_NAME', 'Create New Template');

INSERT INTO res_to_res_membership (RESOURCE_ID, MEMBER_RESOURCE_ID) VALUES('PAGE_TEMPLATE_ROOT', 'PAGE_TEMPLATE_SEARCH');
INSERT INTO res_to_res_membership (RESOURCE_ID, MEMBER_RESOURCE_ID) VALUES('PAGE_TEMPLATE_ROOT', 'PAGE_TEMPLATE_NEW');


INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION) VALUES('PAGE_TEMPLATE_EDIT', 'MENU_ITEM', 'PAGE_TEMPLATE_EDIT', 'Page Template Edit Menu');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('PAGE_TEMPLATE_EDIT_PUB', 'PAGE_TEMPLATE_EDIT', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('PAGE_TEMPLATE_EDIT_DESC', 'PAGE_TEMPLATE_EDIT', 'MENU_DISPLAY_NAME', 'Page Template Edit Menu');

INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION, URL) VALUES('PAGE_TEMPLATE_EDIT_SEARCH', 'MENU_ITEM', 'PAGE_TEMPLATE_EDIT_SEARCH', 'Back to Search', '/webconsole/pageTemplates.html');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('PAGE_TEMPLATE_EDIT_SEARCH_PUB', 'PAGE_TEMPLATE_EDIT_SEARCH', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('PAGE_TEMPLATE_EDIT_SEARCH_DESC', 'PAGE_TEMPLATE_EDIT_SEARCH', 'MENU_DISPLAY_NAME', 'Back to Search');

INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION, URL) VALUES('PAGE_TEMPLATE_EDIT_NEW', 'MENU_ITEM', 'PAGE_TEMPLATE_EDIT_NEW', 'Create New Template', '/webconsole/newPageTemplate.html');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('PAGE_TEMPLATE_EDIT_NEW_PUB', 'PAGE_TEMPLATE_EDIT_NEW', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('PAGE_TEMPLATE_EDIT_NEW_DESC', 'PAGE_TEMPLATE_EDIT_NEW', 'MENU_DISPLAY_NAME', 'Create New Template');


INSERT INTO res_to_res_membership (RESOURCE_ID, MEMBER_RESOURCE_ID) VALUES('PAGE_TEMPLATE_EDIT', 'PAGE_TEMPLATE_EDIT_SEARCH');
INSERT INTO res_to_res_membership (RESOURCE_ID, MEMBER_RESOURCE_ID) VALUES('PAGE_TEMPLATE_EDIT', 'PAGE_TEMPLATE_EDIT_NEW');




INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION, URL) VALUES('CUSTOM_FIELD_SEARCH_CHILD', 'MENU_ITEM', 'CUSTOM_FIELD_SEARCH_CHILD', 'Custom Field Search', '/webconsole/customFields.html');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('CUSTOM_FIELD_SEARCH_CHILD_PUB', 'CUSTOM_FIELD_SEARCH_CHILD', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('CUSTOM_FIELD_SEARCH_CHILD_DESC', 'CUSTOM_FIELD_SEARCH_CHILD', 'MENU_DISPLAY_NAME', 'Custom Fields');
INSERT INTO res_to_res_membership (RESOURCE_ID, MEMBER_RESOURCE_ID) VALUES('ADMIN', 'CUSTOM_FIELD_SEARCH_CHILD');

INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION) VALUES('CUSTOM_FIELD_ROOT', 'MENU_ITEM', 'CUSTOM_FIELD_ROOT', 'Custom Field Root Menu');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('CUSTOM_FIELD_ROOT_PUB', 'CUSTOM_FIELD_ROOT', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('CUSTOM_FIELD_ROOT_DESC', 'CUSTOM_FIELD_ROOT', 'MENU_DISPLAY_NAME', 'Custom Field Root Menu');


INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION, URL) VALUES('CUSTOM_FIELD_SEARCH', 'MENU_ITEM', 'CUSTOM_FIELD_SEARCH', 'Search Custom Fields', '/webconsole/customFields.html');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('CUSTOM_FIELD_SEARCH_PUB', 'CUSTOM_FIELD_SEARCH', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('CUSTOM_FIELD_SEARCH_DESC', 'CUSTOM_FIELD_SEARCH', 'MENU_DISPLAY_NAME', 'Search Custom Fields');


INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION, URL) VALUES('CUSTOM_FIELD_NEW', 'MENU_ITEM', 'CUSTOM_FIELD_NEW', 'Create New Custom Field', '/webconsole/newCustomField.html');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('CUSTOM_FIELD_NEW_PUB', 'CUSTOM_FIELD_NEW', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('CUSTOM_FIELD_NEW_DSC', 'CUSTOM_FIELD_NEW', 'MENU_DISPLAY_NAME', 'Create New Custom Field');

INSERT INTO res_to_res_membership (RESOURCE_ID, MEMBER_RESOURCE_ID) VALUES('CUSTOM_FIELD_ROOT', 'CUSTOM_FIELD_SEARCH');
INSERT INTO res_to_res_membership (RESOURCE_ID, MEMBER_RESOURCE_ID) VALUES('CUSTOM_FIELD_ROOT', 'CUSTOM_FIELD_NEW');


INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION) VALUES('CUSTOM_FIELD_EDIT', 'MENU_ITEM', 'CUSTOM_FIELD_EDIT', 'Custom Field Edit Menu');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('CUSTOM_FIELD_EDIT_PUB', 'CUSTOM_FIELD_EDIT', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('CUSTOM_FIELD_EDIT_DESC', 'CUSTOM_FIELD_EDIT', 'MENU_DISPLAY_NAME', 'Custom Field Edit Menu');

INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION, URL) VALUES('CUSTOM_FIELD_EDIT_SEARCH', 'MENU_ITEM', 'CUSTOM_FIELD_EDIT_SEARCH', 'Back to Search', '/webconsole/customFields.html');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('CUSTOM_FIELD_EDIT_SEARCH_PUB', 'CUSTOM_FIELD_EDIT_SEARCH', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('CUSTOM_FIELD_EDIT_SEARCH_DESC', 'CUSTOM_FIELD_EDIT_SEARCH', 'MENU_DISPLAY_NAME', 'Back to Search');

INSERT INTO RES (RESOURCE_ID, RESOURCE_TYPE_ID, NAME, DESCRIPTION, URL) VALUES('CUSTOM_FIELD_EDIT_NEW', 'MENU_ITEM', 'CUSTOM_FIELD_EDIT_NEW', 'Create New Custom Field', '/webconsole/newCustomField.html');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('CUSTOM_FIELD_EDIT_NEW_PUB', 'CUSTOM_FIELD_EDIT_NEW', 'MENU_IS_PUBLIC', 'true');
INSERT INTO RESOURCE_PROP (RESOURCE_PROP_ID, RESOURCE_ID, NAME, PROP_VALUE) VALUES ('CUSTOM_FIELD_EDIT_NEW_DESC', 'CUSTOM_FIELD_EDIT_NEW', 'MENU_DISPLAY_NAME', 'Create New Custom Field');


INSERT INTO res_to_res_membership (RESOURCE_ID, MEMBER_RESOURCE_ID) VALUES('CUSTOM_FIELD_EDIT', 'CUSTOM_FIELD_EDIT_SEARCH');
INSERT INTO res_to_res_membership (RESOURCE_ID, MEMBER_RESOURCE_ID) VALUES('CUSTOM_FIELD_EDIT', 'CUSTOM_FIELD_EDIT_NEW');






/* new file */
use openiam;

INSERT INTO METADATA_TYPE (TYPE_ID, DESCRIPTION, ACTIVE, SYNC_MANAGED_SYS) VALUES('UI_WIDGET', 'UI_WIDGET', 'Y', 'Y');
INSERT INTO METADATA_TYPE (TYPE_ID, DESCRIPTION, ACTIVE, SYNC_MANAGED_SYS) VALUES('UI_TEMPLATE', 'UI_TEMPLATE', 'Y', 'Y');
INSERT INTO RESOURCE_TYPE (RESOURCE_TYPE_ID, DESCRIPTION, METADATA_TYPE_ID) VALUES('UI_WIDGET', 'UI Widget', 'UI_WIDGET');
INSERT INTO RESOURCE_TYPE (RESOURCE_TYPE_ID, DESCRIPTION, METADATA_TYPE_ID) VALUES('UI_TEMPLATE', 'UI Template', 'UI_TEMPLATE');
/* new file */
use openiam;

INSERT INTO METADATA_TYPE(TYPE_ID,DESCRIPTION, ACTIVE, SYNC_MANAGED_SYS, GROUPING)
            VALUES('TEXT', 'Text field','Y','N','UI_WIDGET'),
                  ('DATE', 'Date field','Y','N','UI_WIDGET'),
                  ('SELECT', 'Combo box','Y','N','UI_WIDGET'),
                  ('MULTI_SELECT', 'MultiSelect list','Y','N','UI_WIDGET'),
                  ('RADIO', 'Radio button','Y','N','UI_WIDGET'),
                  ('CHECKBOX', 'Checkbox','Y','N','UI_WIDGET'),
                  ('TEXTAREA', 'Multiline text field','Y','N','UI_WIDGET'),
                  ('PASSWORD', 'Password field','Y','N','UI_WIDGET');
/* new file */
use openiam;


DELIMITER $$

DROP PROCEDURE IF EXISTS LANGUAGE_SCHEMA_CHANGE$$

CREATE PROCEDURE LANGUAGE_SCHEMA_CHANGE()
	BEGIN
		IF EXISTS (SELECT * FROM information_schema.columns WHERE table_schema='openiam' and table_name = 'LANGUAGE' AND column_name = 'LOCALE') THEN
			ALTER TABLE LANGUAGE DROP COLUMN LOCALE;
    END IF;

		IF NOT EXISTS (SELECT * FROM information_schema.columns WHERE table_schema='openiam' and table_name = 'LANGUAGE' AND column_name = 'LANGUAGE_CODE') THEN
			ALTER TABLE LANGUAGE ADD COLUMN LANGUAGE_CODE varchar(2) NOT NULL;

			UPDATE LANGUAGE SET LANGUAGE_CODE='en' WHERE ID='1';
			UPDATE LANGUAGE SET LANGUAGE_CODE='de' WHERE ID='2';
			UPDATE LANGUAGE SET LANGUAGE_CODE='fr' WHERE ID='3';
			UPDATE LANGUAGE SET LANGUAGE_CODE='es' WHERE ID='4';
			UPDATE LANGUAGE SET LANGUAGE_CODE='it' WHERE ID='5';
			UPDATE LANGUAGE SET LANGUAGE_CODE='nl' WHERE ID='6';
			UPDATE LANGUAGE SET LANGUAGE_CODE='pt' WHERE ID='7';

 		END IF;
	END$$
DELIMITER ;

call LANGUAGE_SCHEMA_CHANGE();

DROP PROCEDURE LANGUAGE_SCHEMA_CHANGE;

DROP TABLE IF EXISTS LANGUAGE_LOCALE;

CREATE TABLE LANGUAGE_LOCALE (
  ID varchar(32) NOT NULL,
  LANGUAGE_ID varchar(32) NOT NULL,
  LOCALE varchar(32) NOT NULL,
  CONSTRAINT LANGUAGE_LOCALE_LANGUAGE_FK FOREIGN KEY (LANGUAGE_ID) REFERENCES LANGUAGE(ID),
  CONSTRAINT LANGUAGE_LOCALE_UNIQUE UNIQUE(LOCALE)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

INSERT INTO LANGUAGE_LOCALE (ID, LANGUAGE_ID, LOCALE) VALUES 
	('1', '1', 'en_EN'),
	('2', '1', 'en_US'),
	('3', '1', 'en_GB'),
	('4', '2', 'de_DE'),
	('5', '3', 'fr_FR'),
	('6', '4', 'es_ES'),
	('7', '5', 'it_IT'),
	('8', '6', 'nl_NL'),
	('9', '7', 'pt_PT');
/* new file */
use openiam;

ALTER TABLE EMAIL_ADDRESS MODIFY NAME VARCHAR(100) NULL;

ALTER TABLE ADDRESS MODIFY NAME VARCHAR(100) NULL;
ALTER TABLE ADDRESS MODIFY COUNTRY VARCHAR(100) NULL;
ALTER TABLE ADDRESS MODIFY CITY VARCHAR(100) NULL;
ALTER TABLE ADDRESS MODIFY STATE VARCHAR(100) NULL;
ALTER TABLE ADDRESS MODIFY POSTAL_CD VARCHAR(100) NULL;
ALTER TABLE ADDRESS MODIFY BLDG_NUM VARCHAR(100) NULL;


CREATE TABLE NOTIFICATION_CONFIG (
	   NOTIFICATION_CONFIG_ID 	VARCHAR(32) NOT NULL,
	   NAME                     VARCHAR(40) NULL,
	   SELECTION_PARAM_XML        		TEXT,
	   MSG_SUBJECT 				VARCHAR(100) NULL,
       MSG_TEMPLATE_URL 		VARCHAR(100) NULL,
       MSG_FROM					VARCHAR(100) NULL,  /* IF ITS AN EMAIL */
       MSG_BCC					VARCHAR(100) NULL,  /* IF ITS AN EMAIL */
       SEARCH_COMPANY_ID        VARCHAR(32) NULL,
       SEARCH_LAST_NAME         VARCHAR(50) NULL,
       SEARCH_DEPT_ID           VARCHAR(32) NULL,
       SEARCH_DIVISION          VARCHAR(32) NULL,
       SEARCH_USER_STATUS       VARCHAR(20) NULL,
       TEMPLATE_URL             VARCHAR(80) NULL,
       MSG_TEXT                 TEXT NULL,
       PRIMARY KEY (NOTIFICATION_CONFIG_ID)
) ENGINE=InnoDB;