use openiam;

START TRANSACTION;

CREATE TABLE role_to_role_membership (
	ROLE_ID varchar(32) NOT NULL,
	MEMBER_ROLE_ID varchar(32) NOT NULL,
	CREATE_DATE TIMESTAMP NULL,
	UPDATE_DATE TIMESTAMP NULL,
	CREATED_BY varchar(32) NULL,
	UPDATED_BY varchar(32) NULL,
	UNIQUE(ROLE_ID, MEMBER_ROLE_ID),
	FOREIGN KEY ROLE_ROLE_MMSP_ROLE_ID (ROLE_ID) REFERENCES ROLE (ROLE_ID ),
	FOREIGN KEY ROLE_ROLE_MMSP_MEMBER_ROLE_ID (MEMBER_ROLE_ID) REFERENCES ROLE (ROLE_ID )
)  Engine=InnoDB;

DELIMITER $$

CREATE TRIGGER role_role_mem_insert 
BEFORE 
INSERT ON role_to_role_membership 
	FOR EACH ROW
	BEGIN
		SET NEW.CREATE_DATE = NOW();
		SET NEW.UPDATE_DATE = NOW();
	END$$

DROP PROCEDURE IF EXISTS migrateRoles$$

CREATE PROCEDURE migrateRoles()
	BEGIN
		DECLARE done INT DEFAULT FALSE;
		DECLARE id, parent VARCHAR(32);		
		DECLARE cur1 CURSOR FOR (SELECT ROLE_ID, PARENT_ROLE_ID FROM ROLE WHERE PARENT_ROLE_ID IS NOT null AND INHERIT_FROM_PARENT=1);
		DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
		OPEN cur1;
		
		REPEAT 
			FETCH cur1 INTO id, parent;
			IF (id IS NOT NULL AND parent IS NOT NULL) THEN
				IF ((SELECT ROLE_ID FROM role_to_role_membership WHERE ROLE_ID=parent AND MEMBER_ROLE_ID=id) IS NULL) THEN
					INSERT INTO role_to_role_membership (ROLE_ID, MEMBER_ROLE_ID) VALUES(parent, id);
				END IF;
			END IF;
		UNTIL done END REPEAT; 
				
		
		CLOSE cur1;
	END$$

DELIMITER ;

call migrateRoles();

DROP PROCEDURE migrateRoles;

COMMIT;